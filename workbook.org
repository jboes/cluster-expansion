* ATAT
This section is designated for all ATAT related calculation and analysis.

** Calculations
Section for setting up various ATAT calculations.

*** Binary alloy calculations
Here we initialize files using a dynamic scaling method which adjusts the lattice size depending on the alloy composition.

#+BEGIN_SRC python :results silent
import numpy as np
from subprocess import call

# This code is used to get a better starting point for lattice constant
lattice = np.array([3.631, 3.712, 3.792, 3.872, 3.953])
rad = 1 / (2*np.sqrt(2)) * lattice
scale = rad[2] / rad[-1]

call(["makelat", "-s={0}".format(scale), "Cu,Pd", "fcc,bcc"])

script = '''[INCAR]
ENCUT = 400
NSW = 50
IBRION = 2
ISIF = 7
KPPRA = 2500
EDIFF = 1e-6
GGA = PS
USEPOT = PAWPBE
'''

with open('vasp.wrap', 'w') as f:
    f.write(script)
#+END_SRC

In this section we begin generate certain number of initial configurations predicted to be unique by ATAT using the existing cluster expansion. The second portion of the code then performs VASP calculations on these structures.

#+BEGIN_SRC python :results silent
import os
import time

# The number of structures to create
N = 10

for d in ['./CuPd_bcc', './CuPd_fcc']:
    os.chdir(d)
    os.system('maps -t=0.25 &')
    for n in range(N):
        open('ready', 'w').close()
        while os.path.exists('ready'):
            time.sleep(0.1)
    open('stop', 'w').close()

time.sleep(3)

# In this section we perfrom VASP calculations on all non-completed configurations
from subprocess import call
for d in ['./CuPd_bcc', './CuPd_fcc']:
    os.chdir(d)
    call(["foreachfile", "wait", "run_atat_vasp.py"])
#+END_SRC

*** Status check
This code performs a simple iteration over all of the structures generated by ATAT and reports their status.

#+BEGIN_SRC python
from subprocess import call

for d in ['./CuPd_bcc', './CuPd_fcc']:
    call(["atatstatus.py", d])
#+END_SRC

** Analysis
Analysis of ATAT calculations.

*** Ground state hull of the
#+caption: Ground state hull of CuPd for fcc and bcc phases.
#+label: fig-cupd-gs
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/groundstate.png]]

#+BEGIN_SRC python : results silent
import numpy as np
import matplotlib.pyplot as plt
from jasp import *
JASPRC['restart_unconverged'] = False

config = ['fcc', 'bcc']
color = ['b', 'r']

plt.figure()
plt.plot([0.0, 1.0], [0, 0], 'k--')

for i, cfg in enumerate(config):

    with open('CuPd_{0}/gs.out'.format(cfg), 'r') as f:
        lines = f.readlines()

        GS, EGS, CGS = [], [], []

        for line in lines:
            # Composition, DFT energy, Fit energy, Configuration
            x, y, z, c = line.split()

            CGS.append(x)
            EGS.append(y)
            GS.append(c)

    with open('CuPd_{0}/fit.out'.format(cfg), 'r') as f:
        lines = f.readlines()

        C, E = [], []

        for line in lines:
            # Composition, DFT energy, Fit energy, Fit error, Weight, Configuration
            x, y, z, e, w, c = line.split()

            C.append(x)
            E.append(y)

    plt.scatter(C, E, c='k', s=15)
    plt.plot(CGS, EGS, c='{0}'.format(color[i]), marker='o', label='{0}'.format(cfg))
    for j, gs in enumerate(GS[1:-1]):
        plt.text(CGS[1:-1][j], float(EGS[1:-1][j])-0.004,
                 '{0}'.format(gs),
                 color='{0}'.format(color[i]),
                 va='top', ha='center',
                 zorder=99)

plt.legend(loc='best')
plt.xlim(0, 1)
plt.xlabel('Composition (Pd)')
plt.ylabel('Heat of formation (eV/atom)')
plt.ylim(-0.15, 0.01)
plt.tight_layout()
plt.savefig('./images/groundstate.png')
#+END_SRC

* DFT
Section for running and organizing on going DFT calculations.

** CuPd fcc and bcc B2 configuration
Perform a high level DFT calculation on the fcc and bcc B2 phase. This is configuration 3 from the ATAT calculation set for both phases.

#+BEGIN_SRC python :results silent
from jasp import *
from ase.io import read
JASPRC['queue.walltime'] = '24:00:00'

# Run for fcc and bcc
for lbl in ['fcc', 'bcc']:

    # Get the CuPd structure for fcc and bcc from ATAT
    # Configuration '3', or B2 phase
    atoms = read('CuPd_{0}/3/CONTCAR'.format(lbl))

    # Will run these calculations on PBEsol and PBE
    for gga in ['PS', 'None']:

        with jasp('DFT/bulk={0}/config=3/xc=PBE/gga={1}'.format(lbl, gga),
                  xc='PBE',
                  gga='{0}'.format(gga),
                  encut=400,
                  kpts=(12, 12, 12),
                  nsw=10,
                  ibrion=2,
                  isif=7,
                  ediff=1e-8,
                  atoms=atoms) as calc:
            try:
                calc.calculate()
            except(VaspQueued, VaspSubmitted):
                pass
#+END_SRC

** fcc to fcc transition through bct geometry
*** data generation
#+BEGIN_SRC python :results silent
from ase.lattice.tetragonal import CenteredTetragonal as bct
import numpy as np
from ase.visualize import view
from jbutil import makedb
from jasp import *
JASPRC['queue.walltime'] = '24:00:00'

# Configuration '3' for fcc
with jasp('DFT/bulk=fcc/config=3/xc=PBE/gga=PS') as calc:
    atoms = calc.get_atoms()
    cell = atoms.get_cell()

# This is the 'a' parameter from the calculation
afcc = np.linalg.norm(cell[0])

# Configuration '3' for bcc i.e. B2
with jasp('DFT/bulk=bcc/config=3/xc=PBE/gga=PS') as calc:
    atoms = calc.get_atoms()
    cell = atoms.get_cell()

# This is the 'a' parameter from the calculation
abcc = np.linalg.norm(cell[0])

# Create a list of sample points
ca0 = np.linspace(0.9, 1.5, 31)
ca0 = np.append(ca0, [np.sqrt(2)])
a0 = np.linspace(2.5, 3.1, 31)
a0 = np.append(a0, [afcc, abcc])

for a in a0:

    for ca in ca0:

        # Generate structure based on sample points
        atoms = bct('Cu', latticeconstant={'a': a, 'c/a': ca})
        atoms[1].symbol = 'Pd'

        wd = 'DFT/bulk=bct/config=3/a={0}/ca={1}/xc=PBE/gga=PS'.format(a, ca)

        with jasp(wd,
                  xc='PBE',
                  gga='PS',
                  encut=400,
                  kpts=(12, 12, 12),
                  ibrion=-1,
                  ediff=1e-8,
                  atoms=atoms) as calc:
            try:
                calc.calculate()
            except(VaspQueued, VaspSubmitted):
                pass
#+END_SRC

*** data visualization
#+caption: 3D Minimum energy pathway of fcc to bcc transition through bct geometry space.
#+label: fig-3d-cupd-min
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/3D-bcc-pathway.png]]

#+BEGIN_SRC python
from ase.lattice.tetragonal import CenteredTetragonal as bct
from ase.db import connect
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
from matplotlib import cm
from jasp import *
from jbutil import makedb
JASPRC['queue.walltime'] = '24:00:00'

# Retrive the data
db = connect('data.db')
A, C = [], []
E = {}
for d in db.select([]):

    if d.a not in E.keys():
        E[d.a] = {}
    if d.ca not in E[d.a].keys():
        E[d.a][d.ca] = d.total_energy

    A.append(d.a)
    C.append(d.ca)

with jasp('DFT/bulk=fcc/config=3/xc=PBE/gga=PS') as calc:
    atoms = calc.get_atoms()
    cell = atoms.get_cell()

    efcc = atoms.get_potential_energy()
    afcc = np.linalg.norm(cell[0])

with jasp('DFT/bulk=bcc/config=3/xc=PBE/gga=PS') as calc:
    atoms = calc.get_atoms()
    cell = atoms.get_cell()

    ebcc = atoms.get_potential_energy()
    abcc = np.linalg.norm(cell[0])

uA = np.unique(A)
uC = np.unique(C)
X, Y = np.meshgrid(uA, uC)
Z = np.zeros(X.shape)

for i, a in enumerate(uA):
    for j, c in enumerate(uC):
        Z[j][i] = E[a][c]

fccZ, bccZ = [], []
eminZ = []
cminZ = []
aminZ = []

for i, c in enumerate(uC[5:-5]):
    data = Z[i+5, :]
    ind = data.tolist().index(min(data))

    eminZ.append(min(data))
    cminZ.append(c)
    aminZ.append(uA[ind])


rng = [ebcc, -10.2]

Z[Z > rng[1]] = np.nan

fig = plt.figure(figsize=(8, 6))
ax = fig.gca(projection='3d')
CM = cm.autumn

cset = ax.contourf(X, Y, Z, zdir='z', offset=-10.8, cmap=CM, vmin=rng[0], vmax=rng[1])

ax.plot_surface(X, Y, Z,
                rstride=1,
                cstride=1,
                cmap=CM,
                linewidth=0,
                vmin=rng[0],
                vmax=rng[1])


ax.scatter(aminZ[1:-1], cminZ[1:-1], eminZ[1:-1], c='k')

ax.plot([afcc, afcc], [np.sqrt(2), np.sqrt(2)], [-10.8, eminZ[-1]], 'go-', zorder=99)
ax.text(afcc, np.sqrt(2), eminZ[-1]+0.01, 'fcc', color='g', zorder=99, size='large')

ax.plot([abcc, abcc], [1.0, 1.0], [-10.8, eminZ[0]], 'bo-', zorder=99)
ax.text(abcc, 1.0, eminZ[0]+0.01, 'bcc', color='b', zorder=99, size='large')

ax.set_xlabel('a')
ax.set_xlim(2.4, 3.2)
ax.set_ylabel('c/a')
ax.set_ylim(0.8, 1.6)
ax.set_zlabel('Total energy (eV)')
ax.set_zlim(-10.8, rng[1])
plt.tight_layout()
plt.savefig('images/3D-bcc-pathway.png')

for i, ca in enumerate(cminZ):

    atoms = bct('Cu', latticeconstant={'a': aminZ[i], 'c/a': ca})
    atoms[1].symbol = 'Pd'

    wd = 'DFT/bulk=bct/config=3/pathway=True/ca={0}/xc=PBE/gga=None'.format(ca)

    with jasp(wd,
              xc='PBE',
              encut=400,
              kpts=(12, 12, 12),
              nsw=20,
              ibrion=2,
              isif=7,
              ediff=1e-9,
              atoms=atoms) as calc:
        try:
            calc.calculate()
        except(VaspQueued, VaspSubmitted):
            pass
#+END_SRC

** Generation of EOS from all ATAT configurations
Generates an EOS for each of the configurations produced by ATAT. This is done for both the fcc and bcc phase cluster expansions.

#+BEGIN_SRC python :results silent
import numpy as np
from jasp import *
JASPRC['queue.walltime'] = '24:00:00'

# For fcc and bcc configurations
for i, cfg in enumerate(['fcc', 'bcc']):

    with open('CuPd_{0}/fit.out'.format(cfg), 'r') as f:
        lines = f.readlines()

        # Begin a list of configurations
        C = []

        for line in lines:
            # Composition, DFT energy, Fit energy, Fit error, Weight, Configuration
            x, y, z, e, w, c = line.split()

            # We only need the configuration
            C.append(c)

    # Fraction of equilibrium lattice constant to be calculated.
    frac_eos = np.append(np.linspace(0.85, 1.15, 61), np.linspace(1.2, 2.0, 17))

    # This array represents all types of deformations we want to calculate.
    # The nominclature being used is as follows:
    # [ x , a , c ]
    # [ a , y , b ]
    # [ c , b , z ]
    # where a, b, and c are the xy, yz, and zx tensors, respectively.
    deformations = [['xyz', frac_eos]]

    for j, c in enumerate(C):

        for dfm in deformations:

            for frac in dfm[1]:

                # This code retrieves the optimized volume and atom positions from the ISIF=3 calculation.
                with jasp('CuPd_{0}/{1}'.format(cfg, c)) as calc:
                    atoms = calc.get_atoms()
                    cell0 = atoms.get_cell()
                    k1, k2, k3 = calc.input_params['kpts']

                dis = {}
                for vector in ['x', 'y', 'z', 'a', 'b', 'c']:
                    dis[vector] = 1.0

                    if vector in dfm[0]:
                        dis[vector] = frac

                delta = np.array([[dis['x']      , 0.5 * (dis['a'] - 1), 0.5 * (dis['c'] - 1)],
                                  [0.5 * (dis['a'] - 1), dis['y']      , 0.5 * (dis['b'] - 1)],
                                  [0.5 * (dis['c'] - 1), 0.5 * (dis['b'] - 1), dis['z']      ]])

                # This line adjusts the cell volume by the fraction specified above. 
                # The atoms are scaled accordingly inside the new unit cell.
                atoms.set_cell(np.dot(cell0, delta), scale_atoms=True)
                wd = 'DFT/bulk={0}/config={1}/strain={2}/factor={3}/xc=PBE/gga=PS'.format(cfg, c, dfm[0], frac)

                try:
                    with jasp(wd,
                              xc='PBE',
                              gga='PS',
                              kpts=(k1, k2, k3),
                              encut=400,
                              ibrion=-1,
                              ediff=1e-8,
                              atoms=atoms) as calc:
                        try:
                            atoms = calc.get_atoms()
                            nrg = atoms.get_potential_energy()
                            print 
                        except(VaspSubmitted, VaspQueued):
                            print wd, 'Queued'
                except(IOError):
                    print wd, 'IOError'
                except(VaspNotFinished):
                    print wd, 'VaspNotFinished'
#+END_SRC

** Relaxations of root 7 x root 7 slab (manual)
Manually determined configurations of an fcc root(7) \times root(7) slab. Only the chemical symbols of the first layer are allowed to change between Cu and Pd.

*** Full relaxation
#+BEGIN_SRC python
from jasp import *
from ase.lattice.surface import fcc111_root
import numpy as np

# Energy unique configurations were manually determined 
configurations = {0:[[]],
                  1:[[32]],
                  2:[[32, 31]],
                  3:[[28, 31, 32],
                     [31, 32, 33]],
                  4:[[29, 30, 33, 34],
                     [28, 29, 30, 34]],
                  5:[[28, 29, 30, 33, 34]],
                  6:[[28, 29, 30, 31, 33, 34]],
                  7:[[28, 29, 30, 31, 32, 33, 34]]}

basis = [['Cu', 'Pd', 3.634],
         ['Pd', 'Cu', 3.939]]

for base in basis:
    b, i, a = base
    for j, cfgs in configurations.iteritems():
        for k, cfg in enumerate(cfgs):

            atoms = fcc111_root(b, 7, [1, 1, 5], a=a)
            for l in cfg:
                atoms[l].symbol = i
            wd = 'DFT/surf=fcc/host={0}/lattice={1:1.3f}/cnt={2}/config={3}'.format(b, a, j, k)

            with jasp(wd,
                      xc='PBE',
                      gga='PS',
                      encut=400,
                      kpts=(5, 5, 1),
                      ibrion=2,
                      isif=2,
                      nsw=40,
                      ediff=1e-5,
                      atoms=atoms) as calc:
                try:
                    atoms = calc.get_atoms()
                    nrg = atoms.get_potential_energy()
                except(VaspQueued, VaspSubmitted):
                    print wd, 'Queued'
#+END_SRC

*** Strain effects xy
#+BEGIN_SRC python
from jasp import *
from ase.lattice.surface import fcc111_root
import numpy as np
JASPRC['queue.walltime'] = '24:00:00'
JASPRC['queue.ppn'] = 4

configurations = {0:[[]],
                  1:[[32]],
                  2:[[32, 31]],
                  3:[[28, 31, 32],
                     [31, 32, 33]],
                  4:[[29, 30, 33, 34],
                     [28, 29, 30, 34]],
                  5:[[28, 29, 30, 33, 34]],
                  6:[[28, 29, 30, 31, 33, 34]],
                  7:[[28, 29, 30, 31, 32, 33, 34]]}

basis = [['Cu', 'Pd', 3.634, np.linspace(0.96, 1.16, 14)],
         ['Pd', 'Cu', 3.939, np.linspace(0.84, 1.04, 14)]]

cells = {}
for b, i, a, fac in basis:
    with jasp('DFT/surf=fcc/host={0}/lattice={1:1.3f}/cnt=0/config=0'.format(b, a)) as calc:
        atoms = calc.get_atoms()
        cell0 = atoms.get_cell()

    pos = atoms.get_positions()
    z = pos[12][-1] - pos[5][-1]
    cells['{0:1.3f}'.format(z)] = []
    for f in fac:
        delta = np.array([[f, 0, 0],
                          [0, f, 0],
                          [0, 0, 1.0]])

        cells['{0:1.3f}'.format(z)].append(np.dot(cell0, delta))
    cells['{0:1.3f}'.format(z)] = np.array(cells['{0:1.3f}'.format(z)])

for b, i, a, fac in basis:

    for j, cfgs in configurations.iteritems():
        for k, cfg in enumerate(cfgs):

            for z, cell in cells.iteritems():

                for c in cell:

                    wd = 'DFT/surf=fcc/host={0}/lattice={1:1.3f}/cnt={2}/config={3}'.format(b, a, j, k)

                    with jasp(wd) as calc:
                        atoms = calc.get_atoms()

                    atoms.set_cell(c, scale_atoms=True)

                    pos = atoms.get_positions()
                    lat = np.linalg.norm(pos[5] - pos[12])

                    nwd = 'DFT/surf=fcc/host={0}/z={1}/xy={2:1.3f}/cnt={3}/config={4}'.format(b, z, lat, j, k)
                    print nwd

                    with jasp(nwd,
                              xc='PBE',
                              gga='PS',
                              encut=400,
                              kpts=(5, 5, 1),
                              ibrion=-1,
                              ediff=1e-5,
                              atoms=atoms) as calc:
                        try:
                            calc.get_required_memory()
                            atoms = calc.get_atoms()
                            nrg = atoms.get_potential_energy()
                        except(VaspSubmitted, VaspQueued):
                            pass
#+END_SRC

** EMT unique configurations
DFT calculations to perform on EMT determined energy unique configurations.

*** 2 free-layer configurations
**** Ground state
#+BEGIN_SRC python :results silent
from ase.lattice.surface import fcc111_root
from ase.db import connect
from jasp import *
from ase.constraints import FixAtoms
from ase.visualize import view
import jbutil as jb
JASPRC['queue.ppn'] = 4
JASPRC['restart_unconverged'] = False

db = connect('traj/unique-2layer.db')

basis = [['Cu', 3.634], ['Pd', 3.939]]

UF = []
for base in basis:

    b, a = base

    for i, d in enumerate(db.select()):

        atoms = fcc111_root(b, 7, [1, 1, 5], a=a, vacuum=6.0)
        n = [atom.index for atom in atoms if atom.tag <= 2]
        cfg = d.symbols[21:]

        for j, s in enumerate(n):
            atoms[s].symbol = cfg[j]

        constraint = FixAtoms(mask=[atom.tag > 3 for atom in atoms])
        atoms.set_constraint(constraint)

        wd = 'DFT/surf=fcc/host={0}/lattice={1:1.3f}/type=layers2/cfg={2}/xy=1.00'.format(b, a, i)

        try:
            with jasp(wd,
                      xc='PBE',
                      encut=400,
                      kpts=(5, 5, 1),
                      ibrion=2,
                      isif=2,
                      nsw=40,
                      ediff=1e-5,
                      atoms=atoms) as calc:
                try:
                    calc.get_required_memory()
                    atoms = calc.get_atoms()
                    nrg = atoms.get_potential_energy()
                    print nrg
                except(VaspQueued, VaspSubmitted):
                    pass
        except(VaspNotFinished):
            UF += [wd]
            jb.reset(wd)

JASPRC['restart_unconverged'] = True

for wd in UF:
    with jasp(wd) as calc:
        try:
            calc.get_required_memory()
            calc.calculate()
        except(VaspQueued, VaspSubmitted):
            pass
#+END_SRC

**** Strain effects xyz
#+BEGIN_SRC python :results silent
import numpy as np
import os
from jasp import *
from ase.visualize import view
JASPRC['queue.ppn'] = 5
JASPRC['queue.walltime'] = '24:00:00'

# Fraction determined by hand, but could also be calculated from fcc lattice geometry
# basis = [['Cu', 3.634, np.linspace(1.00, 1.08392955421, 4)],]
basis = [['Pd', 3.939, np.linspace(1.00, 1.0/1.08392955421, 4)]]

for M, a, factors in basis:

    for cfg in range(343): # The number of unique 2-layer configurations

        wd0 = 'DFT/surf=fcc/host={0}/lattice={1}/type=layers2/cfg={2}/xy=1.00'.format(M, a, cfg)

        for f in factors:

            # For each configurations, start from relaxed geom and apply isotropic strain
            delta = np.array([[f, 0, 0],
                              [0, f, 0],
                              [0, 0, f]])

            with jasp(wd0) as calc:
                atoms = calc.get_atoms()
                cell = atoms.get_cell()

            atoms.set_cell(np.dot(cell, delta), scale_atoms=True)
            lat = atoms.get_distance(2, 10)

            wd = './DFT/surf=fcc/host={0}/lattice={1:1.3f}/type=layers2/cfg={2}/xy=1.00'.format(M, lat, cfg)

            if not os.path.exists(wd):
                with jasp(wd,
                          xc='PBE',
                          encut=400,
                          kpts=(5, 5, 1),
                          ibrion=-1,
                          atoms=atoms) as calc:
                    try:
                        calc.get_required_memory()
                        calc.calculate()
                    except(VaspSubmitted, VaspQueued):
                        pass
#+END_SRC

*** bulk
#+BEGIN_SRC python :results silent
from jasp import *
from ase.io import read
JASPRC['queue.walltime'] = '24:00:00'
JASPRC['queue.ppn'] = 4

images = read('traj/unique-bulk.db')

f =  3.634 / 3.939
delta = np.array([[f, 0, 0],
                  [0, f, 0],
                  [0, 0, f]])

for i, atoms in enumerate(images):
    cell0 = atoms.get_cell()
    atoms.set_cell(np.dot(cell0, delta), scale_atoms=True)

    wd = 'DFT/bulk=fcc/lattice=3.634/config={0}'.format(i)

    with jasp(wd,
              xc='PBE',
              encut=400,
              kpts=(int(12/3), int(12/3), int(12/3)),
              ibrion=-1,
              atoms=atoms) as calc:
        try:
            calc.get_required_memory()
            calc.calculate()
        except(VaspSubmitted, VaspQueued):
            pass
#+END_SRC

** 3 free-layer configurations
#+BEGIN_SRC python
from ase.db import connect
import numpy as np
from ase.visualize import view
import os
from jasp import *
JASPRC['queue.ppn'] = 5
JASPRC['queue.walltime'] = '24:00:00'

db = connect('traj/unique-3layer.db')

for cfg, d in enumerate(db.select()):
    E = abs(d.NN10 / d.natoms - d.NN12 / d.natoms)
    if E > 0.11:
        atoms = db.get_atoms(d.id)
        lat = atoms.get_distance(5, 12)
        M = atoms[0].symbol

        wd = './DFT/surf=fcc/host={0}/lattice={1:1.3f}/type=layers3/cfg={2}/xy=1.00'.format(M, lat, cfg)
        if not os.path.exists(wd):
            with jasp(wd,
                      xc='PBE',
                      encut=400,
                      kpts=(5, 5, 1),
                      ibrion=-1,
                      atoms=atoms) as calc:
                try:
                    calc.get_required_memory()
                    calc.calculate()
                except(VaspSubmitted, VaspQueued):
                    pass
#+END_SRC

** Bulk configurations
Need to start running the worst of these calculations. (i.e. everything above 0.5 eV/atom should be a good number)

#+BEGIN_SRC python
from ase.db import connect
import numpy as np
from amp import Amp
from jasp import *
JASPRC['queue.walltime'] = '24:00:00'
JASPRC['queue.ppn'] = 4

db = connect('temp/bulk-3x3.db')

dE, ids = [], []
a, cfg = [], []
for d in db.select():
    a += [d.a]
    cfg += [d.config]
    ids += [d.id]
    dE += [abs(d.data['NN8'] / d.natoms - d.data['NN10'] / d.natoms)]

ids = np.array(ids)

# The index of energy differences greater than 0.03
ind = np.array([True if d > 0.03 else False for d in dE])

for i in ids[ind]:
    atoms = db.get_atoms(i)

    wd = 'DFT/bulk=fcc/lattice={0:1.3f}/config={1}'.format(a[i], cfg[i])

    with jasp(wd,
              xc='PBE',
              encut=400,
              kpts=(int(12/3), int(12/3), int(12/3)),
              ibrion=-1,
              atoms=atoms) as calc:
        try:
            calc.get_required_memory()
            calc.calculate()
        except(VaspSubmitted, VaspQueued):
            pass
#+END_SRC

#+RESULTS:
#+begin_example
DFT/bulk=fcc/lattice=3.787/config=10
DFT/bulk=fcc/lattice=3.787/config=15
DFT/bulk=fcc/lattice=3.787/config=16
DFT/bulk=fcc/lattice=3.787/config=17
DFT/bulk=fcc/lattice=3.787/config=18
DFT/bulk=fcc/lattice=3.787/config=19
DFT/bulk=fcc/lattice=3.787/config=20
DFT/bulk=fcc/lattice=3.787/config=31
DFT/bulk=fcc/lattice=3.787/config=36
DFT/bulk=fcc/lattice=3.787/config=39
DFT/bulk=fcc/lattice=3.787/config=41
DFT/bulk=fcc/lattice=3.787/config=42
DFT/bulk=fcc/lattice=3.787/config=47
DFT/bulk=fcc/lattice=3.787/config=48
DFT/bulk=fcc/lattice=3.787/config=50
DFT/bulk=fcc/lattice=3.787/config=51
DFT/bulk=fcc/lattice=3.787/config=53
DFT/bulk=fcc/lattice=3.787/config=54
DFT/bulk=fcc/lattice=3.787/config=55
DFT/bulk=fcc/lattice=3.787/config=56
DFT/bulk=fcc/lattice=3.787/config=57
DFT/bulk=fcc/lattice=3.787/config=58
DFT/bulk=fcc/lattice=3.787/config=59
DFT/bulk=fcc/lattice=3.787/config=60
DFT/bulk=fcc/lattice=3.787/config=61
DFT/bulk=fcc/lattice=3.787/config=62
DFT/bulk=fcc/lattice=3.787/config=63
DFT/bulk=fcc/lattice=3.787/config=64
DFT/bulk=fcc/lattice=3.787/config=65
DFT/bulk=fcc/lattice=3.787/config=66
DFT/bulk=fcc/lattice=3.787/config=67
DFT/bulk=fcc/lattice=3.787/config=68
DFT/bulk=fcc/lattice=3.787/config=69
DFT/bulk=fcc/lattice=3.787/config=70
DFT/bulk=fcc/lattice=3.787/config=71
DFT/bulk=fcc/lattice=3.787/config=72
DFT/bulk=fcc/lattice=3.787/config=73
DFT/bulk=fcc/lattice=3.787/config=74
DFT/bulk=fcc/lattice=3.787/config=75
DFT/bulk=fcc/lattice=3.787/config=76
DFT/bulk=fcc/lattice=3.787/config=77
DFT/bulk=fcc/lattice=3.787/config=78
DFT/bulk=fcc/lattice=3.787/config=79
DFT/bulk=fcc/lattice=3.787/config=80
DFT/bulk=fcc/lattice=3.787/config=81
DFT/bulk=fcc/lattice=3.787/config=82
DFT/bulk=fcc/lattice=3.787/config=83
DFT/bulk=fcc/lattice=3.787/config=84
DFT/bulk=fcc/lattice=3.787/config=86
DFT/bulk=fcc/lattice=3.787/config=88
DFT/bulk=fcc/lattice=3.787/config=89
DFT/bulk=fcc/lattice=3.787/config=90
DFT/bulk=fcc/lattice=3.787/config=92
DFT/bulk=fcc/lattice=3.787/config=93
DFT/bulk=fcc/lattice=3.787/config=94
DFT/bulk=fcc/lattice=3.787/config=95
DFT/bulk=fcc/lattice=3.787/config=96
DFT/bulk=fcc/lattice=3.787/config=97
DFT/bulk=fcc/lattice=3.787/config=98
DFT/bulk=fcc/lattice=3.787/config=100
DFT/bulk=fcc/lattice=3.787/config=101
DFT/bulk=fcc/lattice=3.787/config=102
DFT/bulk=fcc/lattice=3.787/config=103
DFT/bulk=fcc/lattice=3.787/config=104
DFT/bulk=fcc/lattice=3.787/config=105
DFT/bulk=fcc/lattice=3.787/config=106
DFT/bulk=fcc/lattice=3.787/config=107
DFT/bulk=fcc/lattice=3.787/config=108
DFT/bulk=fcc/lattice=3.787/config=109
DFT/bulk=fcc/lattice=3.787/config=110
DFT/bulk=fcc/lattice=3.787/config=111
DFT/bulk=fcc/lattice=3.787/config=112
DFT/bulk=fcc/lattice=3.787/config=113
DFT/bulk=fcc/lattice=3.787/config=114
DFT/bulk=fcc/lattice=3.787/config=115
DFT/bulk=fcc/lattice=3.787/config=116
DFT/bulk=fcc/lattice=3.787/config=117
DFT/bulk=fcc/lattice=3.787/config=118
DFT/bulk=fcc/lattice=3.787/config=119
DFT/bulk=fcc/lattice=3.787/config=120
DFT/bulk=fcc/lattice=3.787/config=121
DFT/bulk=fcc/lattice=3.787/config=122
DFT/bulk=fcc/lattice=3.787/config=123
DFT/bulk=fcc/lattice=3.787/config=124
DFT/bulk=fcc/lattice=3.787/config=125
DFT/bulk=fcc/lattice=3.787/config=126
DFT/bulk=fcc/lattice=3.787/config=127
DFT/bulk=fcc/lattice=3.787/config=128
DFT/bulk=fcc/lattice=3.787/config=129
DFT/bulk=fcc/lattice=3.787/config=130
DFT/bulk=fcc/lattice=3.787/config=131
DFT/bulk=fcc/lattice=3.787/config=132
DFT/bulk=fcc/lattice=3.787/config=133
DFT/bulk=fcc/lattice=3.787/config=134
DFT/bulk=fcc/lattice=3.787/config=135
DFT/bulk=fcc/lattice=3.787/config=136
DFT/bulk=fcc/lattice=3.787/config=137
DFT/bulk=fcc/lattice=3.787/config=138
DFT/bulk=fcc/lattice=3.787/config=139
DFT/bulk=fcc/lattice=3.787/config=140
DFT/bulk=fcc/lattice=3.787/config=141
DFT/bulk=fcc/lattice=3.787/config=142
DFT/bulk=fcc/lattice=3.787/config=143
DFT/bulk=fcc/lattice=3.787/config=144
DFT/bulk=fcc/lattice=3.787/config=145
DFT/bulk=fcc/lattice=3.787/config=146
DFT/bulk=fcc/lattice=3.787/config=147
DFT/bulk=fcc/lattice=3.787/config=148
DFT/bulk=fcc/lattice=3.787/config=149
DFT/bulk=fcc/lattice=3.787/config=150
DFT/bulk=fcc/lattice=3.787/config=151
DFT/bulk=fcc/lattice=3.787/config=152
DFT/bulk=fcc/lattice=3.787/config=153
DFT/bulk=fcc/lattice=3.787/config=154
DFT/bulk=fcc/lattice=3.787/config=155
DFT/bulk=fcc/lattice=3.787/config=156
DFT/bulk=fcc/lattice=3.787/config=157
DFT/bulk=fcc/lattice=3.787/config=158
DFT/bulk=fcc/lattice=3.787/config=159
DFT/bulk=fcc/lattice=3.787/config=160
DFT/bulk=fcc/lattice=3.787/config=161
DFT/bulk=fcc/lattice=3.787/config=162
DFT/bulk=fcc/lattice=3.787/config=163
DFT/bulk=fcc/lattice=3.787/config=164
DFT/bulk=fcc/lattice=3.787/config=165
DFT/bulk=fcc/lattice=3.787/config=166
DFT/bulk=fcc/lattice=3.787/config=167
DFT/bulk=fcc/lattice=3.787/config=168
DFT/bulk=fcc/lattice=3.787/config=169
DFT/bulk=fcc/lattice=3.787/config=170
DFT/bulk=fcc/lattice=3.787/config=171
DFT/bulk=fcc/lattice=3.787/config=172
DFT/bulk=fcc/lattice=3.787/config=173
DFT/bulk=fcc/lattice=3.787/config=174
DFT/bulk=fcc/lattice=3.787/config=175
DFT/bulk=fcc/lattice=3.787/config=176
DFT/bulk=fcc/lattice=3.787/config=177
DFT/bulk=fcc/lattice=3.787/config=178
DFT/bulk=fcc/lattice=3.787/config=179
DFT/bulk=fcc/lattice=3.787/config=180
DFT/bulk=fcc/lattice=3.787/config=181
DFT/bulk=fcc/lattice=3.787/config=182
DFT/bulk=fcc/lattice=3.787/config=183
DFT/bulk=fcc/lattice=3.787/config=184
DFT/bulk=fcc/lattice=3.787/config=185
DFT/bulk=fcc/lattice=3.787/config=186
DFT/bulk=fcc/lattice=3.787/config=187
DFT/bulk=fcc/lattice=3.787/config=188
DFT/bulk=fcc/lattice=3.787/config=189
DFT/bulk=fcc/lattice=3.787/config=190
DFT/bulk=fcc/lattice=3.787/config=191
DFT/bulk=fcc/lattice=3.787/config=192
DFT/bulk=fcc/lattice=3.787/config=193
DFT/bulk=fcc/lattice=3.787/config=194
DFT/bulk=fcc/lattice=3.787/config=195
DFT/bulk=fcc/lattice=3.787/config=196
DFT/bulk=fcc/lattice=3.787/config=197
DFT/bulk=fcc/lattice=3.787/config=198
DFT/bulk=fcc/lattice=3.787/config=199
DFT/bulk=fcc/lattice=3.787/config=200
DFT/bulk=fcc/lattice=3.787/config=201
DFT/bulk=fcc/lattice=3.787/config=202
DFT/bulk=fcc/lattice=3.787/config=203
DFT/bulk=fcc/lattice=3.787/config=204
DFT/bulk=fcc/lattice=3.787/config=205
DFT/bulk=fcc/lattice=3.787/config=206
DFT/bulk=fcc/lattice=3.787/config=207
DFT/bulk=fcc/lattice=3.787/config=208
DFT/bulk=fcc/lattice=3.787/config=209
DFT/bulk=fcc/lattice=3.787/config=210
DFT/bulk=fcc/lattice=3.787/config=211
DFT/bulk=fcc/lattice=3.787/config=212
DFT/bulk=fcc/lattice=3.787/config=213
DFT/bulk=fcc/lattice=3.787/config=214
DFT/bulk=fcc/lattice=3.787/config=215
DFT/bulk=fcc/lattice=3.787/config=216
DFT/bulk=fcc/lattice=3.787/config=217
DFT/bulk=fcc/lattice=3.787/config=218
DFT/bulk=fcc/lattice=3.787/config=219
DFT/bulk=fcc/lattice=3.787/config=220
DFT/bulk=fcc/lattice=3.787/config=221
DFT/bulk=fcc/lattice=3.787/config=222
DFT/bulk=fcc/lattice=3.787/config=223
DFT/bulk=fcc/lattice=3.787/config=224
DFT/bulk=fcc/lattice=3.787/config=225
DFT/bulk=fcc/lattice=3.787/config=226
DFT/bulk=fcc/lattice=3.787/config=227
DFT/bulk=fcc/lattice=3.787/config=228
DFT/bulk=fcc/lattice=3.787/config=229
DFT/bulk=fcc/lattice=3.787/config=230
DFT/bulk=fcc/lattice=3.787/config=231
DFT/bulk=fcc/lattice=3.787/config=232
DFT/bulk=fcc/lattice=3.787/config=233
DFT/bulk=fcc/lattice=3.787/config=234
DFT/bulk=fcc/lattice=3.787/config=235
DFT/bulk=fcc/lattice=3.787/config=236
DFT/bulk=fcc/lattice=3.787/config=237
DFT/bulk=fcc/lattice=3.787/config=238
DFT/bulk=fcc/lattice=3.787/config=239
DFT/bulk=fcc/lattice=3.787/config=240
DFT/bulk=fcc/lattice=3.787/config=241
DFT/bulk=fcc/lattice=3.787/config=242
DFT/bulk=fcc/lattice=3.787/config=243
DFT/bulk=fcc/lattice=3.787/config=244
DFT/bulk=fcc/lattice=3.787/config=245
DFT/bulk=fcc/lattice=3.787/config=246
DFT/bulk=fcc/lattice=3.787/config=247
DFT/bulk=fcc/lattice=3.787/config=248
DFT/bulk=fcc/lattice=3.787/config=249
DFT/bulk=fcc/lattice=3.787/config=250
DFT/bulk=fcc/lattice=3.787/config=251
DFT/bulk=fcc/lattice=3.787/config=252
DFT/bulk=fcc/lattice=3.787/config=253
DFT/bulk=fcc/lattice=3.787/config=254
DFT/bulk=fcc/lattice=3.787/config=255
DFT/bulk=fcc/lattice=3.787/config=256
DFT/bulk=fcc/lattice=3.787/config=257
DFT/bulk=fcc/lattice=3.787/config=258
DFT/bulk=fcc/lattice=3.787/config=259
DFT/bulk=fcc/lattice=3.787/config=260
DFT/bulk=fcc/lattice=3.787/config=261
DFT/bulk=fcc/lattice=3.787/config=262
DFT/bulk=fcc/lattice=3.787/config=263
DFT/bulk=fcc/lattice=3.787/config=264
DFT/bulk=fcc/lattice=3.787/config=265
DFT/bulk=fcc/lattice=3.787/config=266
DFT/bulk=fcc/lattice=3.787/config=267
DFT/bulk=fcc/lattice=3.787/config=268
DFT/bulk=fcc/lattice=3.787/config=269
DFT/bulk=fcc/lattice=3.787/config=270
DFT/bulk=fcc/lattice=3.787/config=271
DFT/bulk=fcc/lattice=3.787/config=272
DFT/bulk=fcc/lattice=3.787/config=273
DFT/bulk=fcc/lattice=3.787/config=274
DFT/bulk=fcc/lattice=3.787/config=275
DFT/bulk=fcc/lattice=3.787/config=276
DFT/bulk=fcc/lattice=3.787/config=277
DFT/bulk=fcc/lattice=3.787/config=278
DFT/bulk=fcc/lattice=3.787/config=279
DFT/bulk=fcc/lattice=3.787/config=280
DFT/bulk=fcc/lattice=3.787/config=281
DFT/bulk=fcc/lattice=3.787/config=282
DFT/bulk=fcc/lattice=3.787/config=283
DFT/bulk=fcc/lattice=3.787/config=284
DFT/bulk=fcc/lattice=3.787/config=285
DFT/bulk=fcc/lattice=3.787/config=286
DFT/bulk=fcc/lattice=3.787/config=287
DFT/bulk=fcc/lattice=3.787/config=288
DFT/bulk=fcc/lattice=3.787/config=289
DFT/bulk=fcc/lattice=3.787/config=290
DFT/bulk=fcc/lattice=3.787/config=291
DFT/bulk=fcc/lattice=3.787/config=292
DFT/bulk=fcc/lattice=3.787/config=293
DFT/bulk=fcc/lattice=3.787/config=294
DFT/bulk=fcc/lattice=3.787/config=295
DFT/bulk=fcc/lattice=3.787/config=296
DFT/bulk=fcc/lattice=3.787/config=297
DFT/bulk=fcc/lattice=3.787/config=298
DFT/bulk=fcc/lattice=3.787/config=299
DFT/bulk=fcc/lattice=3.787/config=300
DFT/bulk=fcc/lattice=3.787/config=301
DFT/bulk=fcc/lattice=3.787/config=302
DFT/bulk=fcc/lattice=3.787/config=303
DFT/bulk=fcc/lattice=3.787/config=304
DFT/bulk=fcc/lattice=3.787/config=305
DFT/bulk=fcc/lattice=3.787/config=306
DFT/bulk=fcc/lattice=3.787/config=307
DFT/bulk=fcc/lattice=3.787/config=308
DFT/bulk=fcc/lattice=3.787/config=309
DFT/bulk=fcc/lattice=3.787/config=310
DFT/bulk=fcc/lattice=3.787/config=311
DFT/bulk=fcc/lattice=3.787/config=312
DFT/bulk=fcc/lattice=3.787/config=313
DFT/bulk=fcc/lattice=3.787/config=314
DFT/bulk=fcc/lattice=3.787/config=315
DFT/bulk=fcc/lattice=3.787/config=316
DFT/bulk=fcc/lattice=3.787/config=317
DFT/bulk=fcc/lattice=3.787/config=318
DFT/bulk=fcc/lattice=3.787/config=319
DFT/bulk=fcc/lattice=3.787/config=320
DFT/bulk=fcc/lattice=3.787/config=321
DFT/bulk=fcc/lattice=3.787/config=322
DFT/bulk=fcc/lattice=3.787/config=323
DFT/bulk=fcc/lattice=3.787/config=324
DFT/bulk=fcc/lattice=3.787/config=325
DFT/bulk=fcc/lattice=3.787/config=326
DFT/bulk=fcc/lattice=3.787/config=327
DFT/bulk=fcc/lattice=3.787/config=328
DFT/bulk=fcc/lattice=3.787/config=329
DFT/bulk=fcc/lattice=3.787/config=330
DFT/bulk=fcc/lattice=3.787/config=331
DFT/bulk=fcc/lattice=3.787/config=332
DFT/bulk=fcc/lattice=3.787/config=333
DFT/bulk=fcc/lattice=3.787/config=334
DFT/bulk=fcc/lattice=3.787/config=335
DFT/bulk=fcc/lattice=3.787/config=336
DFT/bulk=fcc/lattice=3.787/config=337
DFT/bulk=fcc/lattice=3.787/config=338
DFT/bulk=fcc/lattice=3.787/config=339
DFT/bulk=fcc/lattice=3.787/config=340
DFT/bulk=fcc/lattice=3.787/config=341
DFT/bulk=fcc/lattice=3.787/config=342
DFT/bulk=fcc/lattice=3.787/config=343
DFT/bulk=fcc/lattice=3.787/config=344
DFT/bulk=fcc/lattice=3.787/config=345
DFT/bulk=fcc/lattice=3.787/config=346
DFT/bulk=fcc/lattice=3.787/config=347
DFT/bulk=fcc/lattice=3.787/config=348
DFT/bulk=fcc/lattice=3.787/config=349
DFT/bulk=fcc/lattice=3.787/config=350
DFT/bulk=fcc/lattice=3.787/config=351
DFT/bulk=fcc/lattice=3.787/config=352
DFT/bulk=fcc/lattice=3.787/config=353
DFT/bulk=fcc/lattice=3.787/config=354
DFT/bulk=fcc/lattice=3.787/config=355
DFT/bulk=fcc/lattice=3.787/config=356
DFT/bulk=fcc/lattice=3.787/config=357
DFT/bulk=fcc/lattice=3.787/config=358
DFT/bulk=fcc/lattice=3.787/config=359
DFT/bulk=fcc/lattice=3.787/config=360
DFT/bulk=fcc/lattice=3.787/config=361
DFT/bulk=fcc/lattice=3.787/config=362
DFT/bulk=fcc/lattice=3.787/config=363
DFT/bulk=fcc/lattice=3.787/config=364
DFT/bulk=fcc/lattice=3.787/config=365
DFT/bulk=fcc/lattice=3.787/config=366
DFT/bulk=fcc/lattice=3.787/config=367
DFT/bulk=fcc/lattice=3.787/config=368
DFT/bulk=fcc/lattice=3.787/config=369
DFT/bulk=fcc/lattice=3.787/config=370
DFT/bulk=fcc/lattice=3.787/config=371
DFT/bulk=fcc/lattice=3.787/config=372
DFT/bulk=fcc/lattice=3.787/config=373
DFT/bulk=fcc/lattice=3.787/config=374
DFT/bulk=fcc/lattice=3.787/config=375
DFT/bulk=fcc/lattice=3.787/config=376
DFT/bulk=fcc/lattice=3.787/config=377
DFT/bulk=fcc/lattice=3.787/config=378
DFT/bulk=fcc/lattice=3.787/config=379
DFT/bulk=fcc/lattice=3.787/config=380
DFT/bulk=fcc/lattice=3.787/config=381
DFT/bulk=fcc/lattice=3.787/config=382
DFT/bulk=fcc/lattice=3.787/config=383
DFT/bulk=fcc/lattice=3.787/config=384
DFT/bulk=fcc/lattice=3.787/config=385
DFT/bulk=fcc/lattice=3.787/config=386
DFT/bulk=fcc/lattice=3.787/config=387
DFT/bulk=fcc/lattice=3.787/config=388
DFT/bulk=fcc/lattice=3.787/config=390
DFT/bulk=fcc/lattice=3.787/config=391
DFT/bulk=fcc/lattice=3.787/config=392
DFT/bulk=fcc/lattice=3.787/config=393
DFT/bulk=fcc/lattice=3.787/config=394
DFT/bulk=fcc/lattice=3.787/config=395
DFT/bulk=fcc/lattice=3.787/config=396
DFT/bulk=fcc/lattice=3.787/config=397
DFT/bulk=fcc/lattice=3.787/config=398
DFT/bulk=fcc/lattice=3.787/config=399
DFT/bulk=fcc/lattice=3.787/config=400
DFT/bulk=fcc/lattice=3.787/config=401
DFT/bulk=fcc/lattice=3.787/config=402
DFT/bulk=fcc/lattice=3.787/config=403
DFT/bulk=fcc/lattice=3.787/config=404
DFT/bulk=fcc/lattice=3.787/config=405
DFT/bulk=fcc/lattice=3.787/config=406
DFT/bulk=fcc/lattice=3.787/config=407
DFT/bulk=fcc/lattice=3.787/config=408
DFT/bulk=fcc/lattice=3.787/config=409
DFT/bulk=fcc/lattice=3.787/config=410
DFT/bulk=fcc/lattice=3.787/config=411
DFT/bulk=fcc/lattice=3.787/config=412
DFT/bulk=fcc/lattice=3.787/config=413
DFT/bulk=fcc/lattice=3.787/config=414
DFT/bulk=fcc/lattice=3.787/config=415
DFT/bulk=fcc/lattice=3.787/config=416
DFT/bulk=fcc/lattice=3.787/config=417
DFT/bulk=fcc/lattice=3.787/config=418
DFT/bulk=fcc/lattice=3.787/config=419
DFT/bulk=fcc/lattice=3.787/config=420
DFT/bulk=fcc/lattice=3.787/config=421
DFT/bulk=fcc/lattice=3.787/config=422
DFT/bulk=fcc/lattice=3.787/config=423
DFT/bulk=fcc/lattice=3.787/config=424
DFT/bulk=fcc/lattice=3.787/config=425
DFT/bulk=fcc/lattice=3.787/config=426
DFT/bulk=fcc/lattice=3.787/config=427
DFT/bulk=fcc/lattice=3.787/config=428
DFT/bulk=fcc/lattice=3.787/config=429
DFT/bulk=fcc/lattice=3.787/config=430
DFT/bulk=fcc/lattice=3.787/config=431
DFT/bulk=fcc/lattice=3.787/config=434
DFT/bulk=fcc/lattice=3.787/config=435
DFT/bulk=fcc/lattice=3.787/config=436
DFT/bulk=fcc/lattice=3.787/config=437
DFT/bulk=fcc/lattice=3.787/config=438
DFT/bulk=fcc/lattice=3.787/config=439
DFT/bulk=fcc/lattice=3.787/config=440
DFT/bulk=fcc/lattice=3.787/config=441
DFT/bulk=fcc/lattice=3.787/config=442
DFT/bulk=fcc/lattice=3.787/config=443
DFT/bulk=fcc/lattice=3.787/config=444
DFT/bulk=fcc/lattice=3.787/config=445
DFT/bulk=fcc/lattice=3.787/config=446
DFT/bulk=fcc/lattice=3.787/config=447
DFT/bulk=fcc/lattice=3.787/config=448
DFT/bulk=fcc/lattice=3.787/config=449
DFT/bulk=fcc/lattice=3.787/config=450
DFT/bulk=fcc/lattice=3.787/config=451
DFT/bulk=fcc/lattice=3.787/config=452
DFT/bulk=fcc/lattice=3.787/config=453
DFT/bulk=fcc/lattice=3.787/config=454
DFT/bulk=fcc/lattice=3.787/config=455
DFT/bulk=fcc/lattice=3.787/config=456
DFT/bulk=fcc/lattice=3.787/config=457
DFT/bulk=fcc/lattice=3.787/config=458
DFT/bulk=fcc/lattice=3.787/config=459
DFT/bulk=fcc/lattice=3.787/config=460
DFT/bulk=fcc/lattice=3.787/config=461
DFT/bulk=fcc/lattice=3.787/config=462
DFT/bulk=fcc/lattice=3.787/config=463
DFT/bulk=fcc/lattice=3.787/config=464
DFT/bulk=fcc/lattice=3.787/config=465
DFT/bulk=fcc/lattice=3.787/config=466
DFT/bulk=fcc/lattice=3.787/config=467
DFT/bulk=fcc/lattice=3.787/config=468
DFT/bulk=fcc/lattice=3.787/config=469
DFT/bulk=fcc/lattice=3.787/config=470
DFT/bulk=fcc/lattice=3.787/config=471
DFT/bulk=fcc/lattice=3.787/config=472
DFT/bulk=fcc/lattice=3.787/config=473
DFT/bulk=fcc/lattice=3.787/config=474
DFT/bulk=fcc/lattice=3.787/config=475
DFT/bulk=fcc/lattice=3.787/config=476
DFT/bulk=fcc/lattice=3.787/config=477
DFT/bulk=fcc/lattice=3.787/config=478
DFT/bulk=fcc/lattice=3.787/config=479
DFT/bulk=fcc/lattice=3.787/config=480
DFT/bulk=fcc/lattice=3.787/config=481
DFT/bulk=fcc/lattice=3.787/config=482
DFT/bulk=fcc/lattice=3.787/config=483
DFT/bulk=fcc/lattice=3.787/config=484
DFT/bulk=fcc/lattice=3.787/config=485
DFT/bulk=fcc/lattice=3.787/config=486
DFT/bulk=fcc/lattice=3.787/config=487
DFT/bulk=fcc/lattice=3.787/config=488
DFT/bulk=fcc/lattice=3.787/config=489
DFT/bulk=fcc/lattice=3.787/config=490
DFT/bulk=fcc/lattice=3.787/config=491
DFT/bulk=fcc/lattice=3.787/config=492
DFT/bulk=fcc/lattice=3.787/config=493
DFT/bulk=fcc/lattice=3.787/config=494
DFT/bulk=fcc/lattice=3.787/config=495
DFT/bulk=fcc/lattice=3.787/config=496
DFT/bulk=fcc/lattice=3.787/config=497
DFT/bulk=fcc/lattice=3.787/config=498
DFT/bulk=fcc/lattice=3.787/config=499
DFT/bulk=fcc/lattice=3.787/config=500
DFT/bulk=fcc/lattice=3.787/config=501
DFT/bulk=fcc/lattice=3.787/config=502
DFT/bulk=fcc/lattice=3.787/config=503
DFT/bulk=fcc/lattice=3.787/config=504
DFT/bulk=fcc/lattice=3.787/config=505
DFT/bulk=fcc/lattice=3.787/config=506
DFT/bulk=fcc/lattice=3.787/config=507
DFT/bulk=fcc/lattice=3.787/config=508
DFT/bulk=fcc/lattice=3.787/config=509
DFT/bulk=fcc/lattice=3.787/config=510
DFT/bulk=fcc/lattice=3.787/config=511
DFT/bulk=fcc/lattice=3.787/config=512
DFT/bulk=fcc/lattice=3.787/config=513
DFT/bulk=fcc/lattice=3.787/config=514
DFT/bulk=fcc/lattice=3.787/config=515
DFT/bulk=fcc/lattice=3.787/config=516
DFT/bulk=fcc/lattice=3.787/config=517
DFT/bulk=fcc/lattice=3.787/config=518
DFT/bulk=fcc/lattice=3.787/config=519
DFT/bulk=fcc/lattice=3.787/config=520
DFT/bulk=fcc/lattice=3.787/config=521
DFT/bulk=fcc/lattice=3.787/config=522
DFT/bulk=fcc/lattice=3.787/config=523
DFT/bulk=fcc/lattice=3.787/config=524
DFT/bulk=fcc/lattice=3.787/config=525
DFT/bulk=fcc/lattice=3.787/config=526
DFT/bulk=fcc/lattice=3.787/config=527
DFT/bulk=fcc/lattice=3.787/config=528
DFT/bulk=fcc/lattice=3.787/config=529
DFT/bulk=fcc/lattice=3.787/config=530
DFT/bulk=fcc/lattice=3.787/config=531
DFT/bulk=fcc/lattice=3.787/config=532
DFT/bulk=fcc/lattice=3.787/config=533
DFT/bulk=fcc/lattice=3.787/config=534
DFT/bulk=fcc/lattice=3.787/config=535
DFT/bulk=fcc/lattice=3.787/config=536
DFT/bulk=fcc/lattice=3.787/config=537
DFT/bulk=fcc/lattice=3.787/config=538
DFT/bulk=fcc/lattice=3.787/config=539
DFT/bulk=fcc/lattice=3.787/config=540
DFT/bulk=fcc/lattice=3.787/config=541
DFT/bulk=fcc/lattice=3.787/config=542
DFT/bulk=fcc/lattice=3.787/config=543
DFT/bulk=fcc/lattice=3.787/config=544
DFT/bulk=fcc/lattice=3.787/config=545
DFT/bulk=fcc/lattice=3.787/config=546
DFT/bulk=fcc/lattice=3.787/config=547
DFT/bulk=fcc/lattice=3.787/config=548
DFT/bulk=fcc/lattice=3.787/config=549
DFT/bulk=fcc/lattice=3.787/config=550
DFT/bulk=fcc/lattice=3.787/config=551
DFT/bulk=fcc/lattice=3.787/config=552
DFT/bulk=fcc/lattice=3.787/config=553
DFT/bulk=fcc/lattice=3.787/config=554
DFT/bulk=fcc/lattice=3.787/config=555
DFT/bulk=fcc/lattice=3.787/config=556
DFT/bulk=fcc/lattice=3.787/config=557
DFT/bulk=fcc/lattice=3.787/config=558
DFT/bulk=fcc/lattice=3.787/config=559
DFT/bulk=fcc/lattice=3.787/config=560
DFT/bulk=fcc/lattice=3.787/config=561
DFT/bulk=fcc/lattice=3.787/config=562
DFT/bulk=fcc/lattice=3.787/config=563
DFT/bulk=fcc/lattice=3.787/config=564
DFT/bulk=fcc/lattice=3.787/config=565
DFT/bulk=fcc/lattice=3.787/config=566
DFT/bulk=fcc/lattice=3.787/config=567
DFT/bulk=fcc/lattice=3.787/config=568
DFT/bulk=fcc/lattice=3.787/config=569
DFT/bulk=fcc/lattice=3.787/config=570
DFT/bulk=fcc/lattice=3.787/config=571
DFT/bulk=fcc/lattice=3.787/config=572
DFT/bulk=fcc/lattice=3.787/config=573
DFT/bulk=fcc/lattice=3.787/config=574
DFT/bulk=fcc/lattice=3.787/config=575
DFT/bulk=fcc/lattice=3.787/config=576
DFT/bulk=fcc/lattice=3.787/config=577
DFT/bulk=fcc/lattice=3.787/config=578
DFT/bulk=fcc/lattice=3.787/config=579
DFT/bulk=fcc/lattice=3.787/config=580
DFT/bulk=fcc/lattice=3.787/config=581
DFT/bulk=fcc/lattice=3.787/config=582
DFT/bulk=fcc/lattice=3.787/config=583
DFT/bulk=fcc/lattice=3.787/config=584
DFT/bulk=fcc/lattice=3.787/config=585
DFT/bulk=fcc/lattice=3.787/config=586
DFT/bulk=fcc/lattice=3.787/config=587
DFT/bulk=fcc/lattice=3.787/config=588
DFT/bulk=fcc/lattice=3.787/config=589
DFT/bulk=fcc/lattice=3.787/config=590
DFT/bulk=fcc/lattice=3.787/config=591
DFT/bulk=fcc/lattice=3.787/config=592
DFT/bulk=fcc/lattice=3.787/config=593
DFT/bulk=fcc/lattice=3.787/config=594
DFT/bulk=fcc/lattice=3.787/config=595
DFT/bulk=fcc/lattice=3.787/config=596
DFT/bulk=fcc/lattice=3.787/config=597
DFT/bulk=fcc/lattice=3.787/config=598
DFT/bulk=fcc/lattice=3.787/config=599
DFT/bulk=fcc/lattice=3.787/config=600
DFT/bulk=fcc/lattice=3.787/config=601
DFT/bulk=fcc/lattice=3.787/config=602
DFT/bulk=fcc/lattice=3.787/config=603
DFT/bulk=fcc/lattice=3.787/config=604
DFT/bulk=fcc/lattice=3.787/config=605
DFT/bulk=fcc/lattice=3.787/config=606
DFT/bulk=fcc/lattice=3.787/config=607
DFT/bulk=fcc/lattice=3.787/config=608
DFT/bulk=fcc/lattice=3.787/config=609
DFT/bulk=fcc/lattice=3.787/config=610
DFT/bulk=fcc/lattice=3.787/config=611
DFT/bulk=fcc/lattice=3.787/config=612
DFT/bulk=fcc/lattice=3.787/config=613
DFT/bulk=fcc/lattice=3.787/config=614
DFT/bulk=fcc/lattice=3.787/config=615
DFT/bulk=fcc/lattice=3.787/config=616
DFT/bulk=fcc/lattice=3.787/config=617
DFT/bulk=fcc/lattice=3.787/config=618
DFT/bulk=fcc/lattice=3.787/config=619
DFT/bulk=fcc/lattice=3.787/config=620
DFT/bulk=fcc/lattice=3.787/config=621
DFT/bulk=fcc/lattice=3.787/config=622
DFT/bulk=fcc/lattice=3.787/config=623
DFT/bulk=fcc/lattice=3.787/config=624
DFT/bulk=fcc/lattice=3.787/config=625
DFT/bulk=fcc/lattice=3.787/config=626
DFT/bulk=fcc/lattice=3.787/config=627
DFT/bulk=fcc/lattice=3.787/config=628
DFT/bulk=fcc/lattice=3.787/config=629
DFT/bulk=fcc/lattice=3.787/config=630
DFT/bulk=fcc/lattice=3.787/config=631
DFT/bulk=fcc/lattice=3.787/config=632
DFT/bulk=fcc/lattice=3.787/config=633
DFT/bulk=fcc/lattice=3.787/config=634
DFT/bulk=fcc/lattice=3.787/config=635
DFT/bulk=fcc/lattice=3.787/config=636
DFT/bulk=fcc/lattice=3.787/config=637
DFT/bulk=fcc/lattice=3.787/config=638
DFT/bulk=fcc/lattice=3.787/config=639
DFT/bulk=fcc/lattice=3.787/config=640
DFT/bulk=fcc/lattice=3.787/config=641
DFT/bulk=fcc/lattice=3.787/config=642
DFT/bulk=fcc/lattice=3.787/config=643
DFT/bulk=fcc/lattice=3.787/config=644
DFT/bulk=fcc/lattice=3.787/config=645
DFT/bulk=fcc/lattice=3.787/config=646
DFT/bulk=fcc/lattice=3.787/config=647
DFT/bulk=fcc/lattice=3.787/config=648
DFT/bulk=fcc/lattice=3.787/config=649
DFT/bulk=fcc/lattice=3.787/config=650
DFT/bulk=fcc/lattice=3.787/config=651
DFT/bulk=fcc/lattice=3.787/config=652
DFT/bulk=fcc/lattice=3.787/config=653
DFT/bulk=fcc/lattice=3.787/config=654
DFT/bulk=fcc/lattice=3.787/config=655
DFT/bulk=fcc/lattice=3.787/config=656
DFT/bulk=fcc/lattice=3.787/config=657
DFT/bulk=fcc/lattice=3.787/config=658
DFT/bulk=fcc/lattice=3.787/config=659
DFT/bulk=fcc/lattice=3.787/config=660
DFT/bulk=fcc/lattice=3.787/config=661
DFT/bulk=fcc/lattice=3.787/config=662
DFT/bulk=fcc/lattice=3.787/config=663
DFT/bulk=fcc/lattice=3.787/config=664
DFT/bulk=fcc/lattice=3.787/config=665
DFT/bulk=fcc/lattice=3.787/config=666
DFT/bulk=fcc/lattice=3.787/config=667
DFT/bulk=fcc/lattice=3.787/config=668
DFT/bulk=fcc/lattice=3.787/config=669
DFT/bulk=fcc/lattice=3.787/config=670
DFT/bulk=fcc/lattice=3.787/config=671
DFT/bulk=fcc/lattice=3.787/config=672
DFT/bulk=fcc/lattice=3.787/config=673
DFT/bulk=fcc/lattice=3.787/config=674
DFT/bulk=fcc/lattice=3.787/config=675
DFT/bulk=fcc/lattice=3.787/config=676
DFT/bulk=fcc/lattice=3.787/config=677
DFT/bulk=fcc/lattice=3.787/config=678
DFT/bulk=fcc/lattice=3.787/config=679
DFT/bulk=fcc/lattice=3.787/config=680
DFT/bulk=fcc/lattice=3.787/config=681
DFT/bulk=fcc/lattice=3.787/config=682
DFT/bulk=fcc/lattice=3.787/config=683
DFT/bulk=fcc/lattice=3.787/config=684
DFT/bulk=fcc/lattice=3.787/config=685
DFT/bulk=fcc/lattice=3.787/config=686
DFT/bulk=fcc/lattice=3.787/config=687
DFT/bulk=fcc/lattice=3.787/config=688
DFT/bulk=fcc/lattice=3.787/config=689
DFT/bulk=fcc/lattice=3.787/config=690
DFT/bulk=fcc/lattice=3.787/config=691
DFT/bulk=fcc/lattice=3.787/config=692
DFT/bulk=fcc/lattice=3.787/config=693
DFT/bulk=fcc/lattice=3.787/config=694
DFT/bulk=fcc/lattice=3.787/config=695
DFT/bulk=fcc/lattice=3.787/config=696
DFT/bulk=fcc/lattice=3.787/config=697
DFT/bulk=fcc/lattice=3.787/config=698
DFT/bulk=fcc/lattice=3.787/config=699
DFT/bulk=fcc/lattice=3.787/config=700
DFT/bulk=fcc/lattice=3.787/config=701
DFT/bulk=fcc/lattice=3.787/config=702
DFT/bulk=fcc/lattice=3.787/config=703
DFT/bulk=fcc/lattice=3.787/config=704
DFT/bulk=fcc/lattice=3.787/config=705
DFT/bulk=fcc/lattice=3.787/config=706
DFT/bulk=fcc/lattice=3.787/config=707
DFT/bulk=fcc/lattice=3.787/config=708
DFT/bulk=fcc/lattice=3.787/config=709
DFT/bulk=fcc/lattice=3.787/config=710
DFT/bulk=fcc/lattice=3.787/config=711
DFT/bulk=fcc/lattice=3.787/config=712
DFT/bulk=fcc/lattice=3.787/config=713
DFT/bulk=fcc/lattice=3.787/config=714
DFT/bulk=fcc/lattice=3.787/config=715
DFT/bulk=fcc/lattice=3.787/config=716
DFT/bulk=fcc/lattice=3.787/config=717
DFT/bulk=fcc/lattice=3.787/config=718
DFT/bulk=fcc/lattice=3.787/config=719
DFT/bulk=fcc/lattice=3.787/config=720
DFT/bulk=fcc/lattice=3.787/config=721
DFT/bulk=fcc/lattice=3.787/config=722
DFT/bulk=fcc/lattice=3.787/config=723
DFT/bulk=fcc/lattice=3.787/config=724
DFT/bulk=fcc/lattice=3.787/config=725
DFT/bulk=fcc/lattice=3.787/config=726
DFT/bulk=fcc/lattice=3.787/config=727
DFT/bulk=fcc/lattice=3.787/config=728
DFT/bulk=fcc/lattice=3.787/config=729
DFT/bulk=fcc/lattice=3.787/config=730
DFT/bulk=fcc/lattice=3.787/config=731
DFT/bulk=fcc/lattice=3.787/config=732
DFT/bulk=fcc/lattice=3.787/config=733
DFT/bulk=fcc/lattice=3.787/config=734
DFT/bulk=fcc/lattice=3.787/config=735
DFT/bulk=fcc/lattice=3.787/config=736
DFT/bulk=fcc/lattice=3.787/config=737
DFT/bulk=fcc/lattice=3.787/config=738
DFT/bulk=fcc/lattice=3.787/config=739
DFT/bulk=fcc/lattice=3.787/config=740
DFT/bulk=fcc/lattice=3.787/config=741
DFT/bulk=fcc/lattice=3.787/config=742
DFT/bulk=fcc/lattice=3.787/config=743
DFT/bulk=fcc/lattice=3.787/config=744
DFT/bulk=fcc/lattice=3.787/config=745
DFT/bulk=fcc/lattice=3.787/config=746
DFT/bulk=fcc/lattice=3.787/config=747
DFT/bulk=fcc/lattice=3.787/config=748
DFT/bulk=fcc/lattice=3.787/config=749
DFT/bulk=fcc/lattice=3.787/config=750
DFT/bulk=fcc/lattice=3.787/config=751
DFT/bulk=fcc/lattice=3.787/config=752
DFT/bulk=fcc/lattice=3.787/config=753
DFT/bulk=fcc/lattice=3.787/config=754
DFT/bulk=fcc/lattice=3.787/config=755
DFT/bulk=fcc/lattice=3.787/config=756
DFT/bulk=fcc/lattice=3.787/config=757
DFT/bulk=fcc/lattice=3.787/config=758
DFT/bulk=fcc/lattice=3.787/config=759
DFT/bulk=fcc/lattice=3.787/config=760
DFT/bulk=fcc/lattice=3.787/config=761
DFT/bulk=fcc/lattice=3.787/config=762
DFT/bulk=fcc/lattice=3.787/config=763
DFT/bulk=fcc/lattice=3.787/config=764
DFT/bulk=fcc/lattice=3.787/config=765
DFT/bulk=fcc/lattice=3.787/config=766
DFT/bulk=fcc/lattice=3.787/config=767
DFT/bulk=fcc/lattice=3.787/config=768
DFT/bulk=fcc/lattice=3.787/config=769
DFT/bulk=fcc/lattice=3.787/config=770
DFT/bulk=fcc/lattice=3.787/config=771
DFT/bulk=fcc/lattice=3.787/config=772
DFT/bulk=fcc/lattice=3.787/config=773
DFT/bulk=fcc/lattice=3.787/config=774
DFT/bulk=fcc/lattice=3.787/config=775
DFT/bulk=fcc/lattice=3.787/config=776
DFT/bulk=fcc/lattice=3.787/config=777
DFT/bulk=fcc/lattice=3.787/config=778
DFT/bulk=fcc/lattice=3.787/config=779
DFT/bulk=fcc/lattice=3.787/config=780
DFT/bulk=fcc/lattice=3.787/config=781
DFT/bulk=fcc/lattice=3.787/config=782
DFT/bulk=fcc/lattice=3.787/config=783
DFT/bulk=fcc/lattice=3.787/config=784
DFT/bulk=fcc/lattice=3.787/config=785
DFT/bulk=fcc/lattice=3.787/config=786
DFT/bulk=fcc/lattice=3.787/config=787
DFT/bulk=fcc/lattice=3.787/config=788
DFT/bulk=fcc/lattice=3.787/config=789
DFT/bulk=fcc/lattice=3.787/config=790
DFT/bulk=fcc/lattice=3.787/config=791
DFT/bulk=fcc/lattice=3.787/config=792
DFT/bulk=fcc/lattice=3.787/config=793
DFT/bulk=fcc/lattice=3.787/config=794
DFT/bulk=fcc/lattice=3.787/config=795
DFT/bulk=fcc/lattice=3.787/config=796
DFT/bulk=fcc/lattice=3.787/config=797
DFT/bulk=fcc/lattice=3.787/config=798
DFT/bulk=fcc/lattice=3.787/config=799
DFT/bulk=fcc/lattice=3.787/config=800
DFT/bulk=fcc/lattice=3.787/config=801
DFT/bulk=fcc/lattice=3.787/config=802
DFT/bulk=fcc/lattice=3.787/config=803
DFT/bulk=fcc/lattice=3.787/config=804
DFT/bulk=fcc/lattice=3.787/config=805
DFT/bulk=fcc/lattice=3.787/config=806
DFT/bulk=fcc/lattice=3.787/config=807
DFT/bulk=fcc/lattice=3.787/config=808
DFT/bulk=fcc/lattice=3.787/config=809
DFT/bulk=fcc/lattice=3.787/config=810
DFT/bulk=fcc/lattice=3.787/config=811
DFT/bulk=fcc/lattice=3.787/config=812
DFT/bulk=fcc/lattice=3.787/config=813
DFT/bulk=fcc/lattice=3.787/config=814
DFT/bulk=fcc/lattice=3.787/config=815
DFT/bulk=fcc/lattice=3.787/config=816
DFT/bulk=fcc/lattice=3.787/config=817
DFT/bulk=fcc/lattice=3.787/config=818
DFT/bulk=fcc/lattice=3.787/config=819
DFT/bulk=fcc/lattice=3.787/config=820
DFT/bulk=fcc/lattice=3.787/config=821
DFT/bulk=fcc/lattice=3.787/config=822
DFT/bulk=fcc/lattice=3.787/config=823
DFT/bulk=fcc/lattice=3.787/config=824
DFT/bulk=fcc/lattice=3.787/config=825
DFT/bulk=fcc/lattice=3.787/config=826
DFT/bulk=fcc/lattice=3.787/config=827
DFT/bulk=fcc/lattice=3.787/config=828
DFT/bulk=fcc/lattice=3.787/config=829
DFT/bulk=fcc/lattice=3.787/config=830
DFT/bulk=fcc/lattice=3.787/config=831
DFT/bulk=fcc/lattice=3.787/config=832
DFT/bulk=fcc/lattice=3.787/config=833
DFT/bulk=fcc/lattice=3.787/config=834
DFT/bulk=fcc/lattice=3.787/config=835
DFT/bulk=fcc/lattice=3.787/config=836
DFT/bulk=fcc/lattice=3.787/config=837
DFT/bulk=fcc/lattice=3.787/config=838
DFT/bulk=fcc/lattice=3.787/config=839
DFT/bulk=fcc/lattice=3.787/config=840
DFT/bulk=fcc/lattice=3.787/config=841
DFT/bulk=fcc/lattice=3.787/config=842
DFT/bulk=fcc/lattice=3.787/config=843
DFT/bulk=fcc/lattice=3.787/config=844
DFT/bulk=fcc/lattice=3.787/config=845
DFT/bulk=fcc/lattice=3.787/config=846
DFT/bulk=fcc/lattice=3.787/config=847
DFT/bulk=fcc/lattice=3.787/config=848
DFT/bulk=fcc/lattice=3.787/config=849
DFT/bulk=fcc/lattice=3.787/config=850
DFT/bulk=fcc/lattice=3.787/config=851
DFT/bulk=fcc/lattice=3.787/config=852
DFT/bulk=fcc/lattice=3.787/config=853
DFT/bulk=fcc/lattice=3.787/config=854
DFT/bulk=fcc/lattice=3.787/config=855
DFT/bulk=fcc/lattice=3.787/config=856
DFT/bulk=fcc/lattice=3.787/config=857
DFT/bulk=fcc/lattice=3.787/config=858
DFT/bulk=fcc/lattice=3.787/config=859
DFT/bulk=fcc/lattice=3.787/config=860
DFT/bulk=fcc/lattice=3.787/config=861
DFT/bulk=fcc/lattice=3.787/config=862
DFT/bulk=fcc/lattice=3.787/config=863
DFT/bulk=fcc/lattice=3.787/config=864
DFT/bulk=fcc/lattice=3.787/config=865
DFT/bulk=fcc/lattice=3.787/config=866
DFT/bulk=fcc/lattice=3.787/config=867
DFT/bulk=fcc/lattice=3.787/config=868
DFT/bulk=fcc/lattice=3.787/config=869
DFT/bulk=fcc/lattice=3.787/config=870
DFT/bulk=fcc/lattice=3.787/config=871
DFT/bulk=fcc/lattice=3.787/config=872
DFT/bulk=fcc/lattice=3.787/config=873
DFT/bulk=fcc/lattice=3.787/config=874
DFT/bulk=fcc/lattice=3.787/config=875
DFT/bulk=fcc/lattice=3.787/config=876
DFT/bulk=fcc/lattice=3.787/config=877
DFT/bulk=fcc/lattice=3.787/config=878
DFT/bulk=fcc/lattice=3.787/config=879
DFT/bulk=fcc/lattice=3.787/config=880
DFT/bulk=fcc/lattice=3.787/config=881
DFT/bulk=fcc/lattice=3.787/config=882
DFT/bulk=fcc/lattice=3.787/config=883
DFT/bulk=fcc/lattice=3.787/config=884
DFT/bulk=fcc/lattice=3.787/config=885
DFT/bulk=fcc/lattice=3.787/config=886
DFT/bulk=fcc/lattice=3.787/config=887
DFT/bulk=fcc/lattice=3.787/config=888
DFT/bulk=fcc/lattice=3.787/config=889
DFT/bulk=fcc/lattice=3.787/config=890
DFT/bulk=fcc/lattice=3.787/config=891
DFT/bulk=fcc/lattice=3.787/config=892
DFT/bulk=fcc/lattice=3.787/config=893
DFT/bulk=fcc/lattice=3.787/config=894
DFT/bulk=fcc/lattice=3.787/config=895
DFT/bulk=fcc/lattice=3.787/config=896
DFT/bulk=fcc/lattice=3.787/config=897
DFT/bulk=fcc/lattice=3.787/config=898
DFT/bulk=fcc/lattice=3.787/config=899
DFT/bulk=fcc/lattice=3.787/config=900
DFT/bulk=fcc/lattice=3.787/config=901
DFT/bulk=fcc/lattice=3.787/config=902
DFT/bulk=fcc/lattice=3.787/config=903
DFT/bulk=fcc/lattice=3.787/config=904
DFT/bulk=fcc/lattice=3.787/config=905
DFT/bulk=fcc/lattice=3.787/config=906
DFT/bulk=fcc/lattice=3.787/config=907
DFT/bulk=fcc/lattice=3.787/config=908
DFT/bulk=fcc/lattice=3.787/config=909
DFT/bulk=fcc/lattice=3.787/config=910
DFT/bulk=fcc/lattice=3.787/config=911
DFT/bulk=fcc/lattice=3.787/config=912
DFT/bulk=fcc/lattice=3.787/config=913
DFT/bulk=fcc/lattice=3.787/config=914
DFT/bulk=fcc/lattice=3.787/config=915
DFT/bulk=fcc/lattice=3.787/config=916
DFT/bulk=fcc/lattice=3.787/config=917
DFT/bulk=fcc/lattice=3.787/config=918
DFT/bulk=fcc/lattice=3.787/config=919
DFT/bulk=fcc/lattice=3.787/config=920
DFT/bulk=fcc/lattice=3.787/config=921
DFT/bulk=fcc/lattice=3.787/config=922
DFT/bulk=fcc/lattice=3.787/config=923
DFT/bulk=fcc/lattice=3.787/config=924
DFT/bulk=fcc/lattice=3.787/config=925
DFT/bulk=fcc/lattice=3.787/config=926
DFT/bulk=fcc/lattice=3.787/config=927
DFT/bulk=fcc/lattice=3.787/config=928
DFT/bulk=fcc/lattice=3.787/config=929
DFT/bulk=fcc/lattice=3.787/config=930
DFT/bulk=fcc/lattice=3.787/config=931
DFT/bulk=fcc/lattice=3.787/config=932
DFT/bulk=fcc/lattice=3.787/config=933
DFT/bulk=fcc/lattice=3.787/config=934
DFT/bulk=fcc/lattice=3.787/config=935
DFT/bulk=fcc/lattice=3.787/config=936
DFT/bulk=fcc/lattice=3.787/config=937
DFT/bulk=fcc/lattice=3.787/config=938
DFT/bulk=fcc/lattice=3.787/config=939
DFT/bulk=fcc/lattice=3.787/config=940
DFT/bulk=fcc/lattice=3.787/config=941
DFT/bulk=fcc/lattice=3.787/config=942
DFT/bulk=fcc/lattice=3.787/config=943
DFT/bulk=fcc/lattice=3.787/config=944
DFT/bulk=fcc/lattice=3.787/config=945
DFT/bulk=fcc/lattice=3.787/config=946
DFT/bulk=fcc/lattice=3.787/config=947
DFT/bulk=fcc/lattice=3.787/config=948
DFT/bulk=fcc/lattice=3.787/config=949
DFT/bulk=fcc/lattice=3.787/config=950
DFT/bulk=fcc/lattice=3.787/config=951
DFT/bulk=fcc/lattice=3.787/config=952
DFT/bulk=fcc/lattice=3.787/config=953
DFT/bulk=fcc/lattice=3.787/config=954
DFT/bulk=fcc/lattice=3.787/config=955
DFT/bulk=fcc/lattice=3.787/config=956
DFT/bulk=fcc/lattice=3.787/config=957
DFT/bulk=fcc/lattice=3.787/config=958
DFT/bulk=fcc/lattice=3.787/config=959
DFT/bulk=fcc/lattice=3.787/config=960
DFT/bulk=fcc/lattice=3.787/config=961
DFT/bulk=fcc/lattice=3.787/config=962
DFT/bulk=fcc/lattice=3.787/config=963
DFT/bulk=fcc/lattice=3.787/config=964
DFT/bulk=fcc/lattice=3.787/config=965
DFT/bulk=fcc/lattice=3.787/config=966
DFT/bulk=fcc/lattice=3.787/config=967
DFT/bulk=fcc/lattice=3.787/config=968
DFT/bulk=fcc/lattice=3.787/config=969
DFT/bulk=fcc/lattice=3.787/config=970
DFT/bulk=fcc/lattice=3.787/config=971
DFT/bulk=fcc/lattice=3.787/config=972
DFT/bulk=fcc/lattice=3.787/config=973
DFT/bulk=fcc/lattice=3.787/config=974
DFT/bulk=fcc/lattice=3.787/config=975
DFT/bulk=fcc/lattice=3.787/config=976
DFT/bulk=fcc/lattice=3.787/config=977
DFT/bulk=fcc/lattice=3.787/config=978
DFT/bulk=fcc/lattice=3.787/config=979
DFT/bulk=fcc/lattice=3.787/config=980
DFT/bulk=fcc/lattice=3.787/config=981
DFT/bulk=fcc/lattice=3.787/config=982
DFT/bulk=fcc/lattice=3.787/config=983
DFT/bulk=fcc/lattice=3.787/config=984
DFT/bulk=fcc/lattice=3.787/config=985
DFT/bulk=fcc/lattice=3.787/config=986
DFT/bulk=fcc/lattice=3.787/config=987
DFT/bulk=fcc/lattice=3.787/config=988
DFT/bulk=fcc/lattice=3.787/config=989
DFT/bulk=fcc/lattice=3.787/config=990
DFT/bulk=fcc/lattice=3.787/config=991
DFT/bulk=fcc/lattice=3.787/config=992
DFT/bulk=fcc/lattice=3.787/config=993
DFT/bulk=fcc/lattice=3.787/config=994
DFT/bulk=fcc/lattice=3.787/config=995
DFT/bulk=fcc/lattice=3.787/config=996
DFT/bulk=fcc/lattice=3.787/config=997
DFT/bulk=fcc/lattice=3.787/config=998
DFT/bulk=fcc/lattice=3.787/config=999
DFT/bulk=fcc/lattice=3.787/config=1000
DFT/bulk=fcc/lattice=3.787/config=1001
DFT/bulk=fcc/lattice=3.787/config=1002
DFT/bulk=fcc/lattice=3.787/config=1003
DFT/bulk=fcc/lattice=3.787/config=1004
DFT/bulk=fcc/lattice=3.787/config=1005
DFT/bulk=fcc/lattice=3.787/config=1006
DFT/bulk=fcc/lattice=3.787/config=1007
DFT/bulk=fcc/lattice=3.787/config=1008
DFT/bulk=fcc/lattice=3.787/config=1009
DFT/bulk=fcc/lattice=3.787/config=1010
DFT/bulk=fcc/lattice=3.787/config=1011
DFT/bulk=fcc/lattice=3.787/config=1012
DFT/bulk=fcc/lattice=3.787/config=1013
DFT/bulk=fcc/lattice=3.787/config=1014
DFT/bulk=fcc/lattice=3.787/config=1015
DFT/bulk=fcc/lattice=3.787/config=1016
DFT/bulk=fcc/lattice=3.787/config=1017
DFT/bulk=fcc/lattice=3.787/config=1018
DFT/bulk=fcc/lattice=3.787/config=1019
DFT/bulk=fcc/lattice=3.787/config=1020
DFT/bulk=fcc/lattice=3.787/config=1021
DFT/bulk=fcc/lattice=3.787/config=1022
DFT/bulk=fcc/lattice=3.787/config=1023
DFT/bulk=fcc/lattice=3.787/config=1024
DFT/bulk=fcc/lattice=3.787/config=1025
DFT/bulk=fcc/lattice=3.787/config=1026
DFT/bulk=fcc/lattice=3.787/config=1027
DFT/bulk=fcc/lattice=3.787/config=1028
DFT/bulk=fcc/lattice=3.787/config=1029
DFT/bulk=fcc/lattice=3.787/config=1030
DFT/bulk=fcc/lattice=3.787/config=1031
DFT/bulk=fcc/lattice=3.787/config=1032
DFT/bulk=fcc/lattice=3.787/config=1033
DFT/bulk=fcc/lattice=3.787/config=1034
DFT/bulk=fcc/lattice=3.787/config=1035
DFT/bulk=fcc/lattice=3.787/config=1036
DFT/bulk=fcc/lattice=3.787/config=1037
DFT/bulk=fcc/lattice=3.787/config=1038
DFT/bulk=fcc/lattice=3.787/config=1039
DFT/bulk=fcc/lattice=3.787/config=1040
DFT/bulk=fcc/lattice=3.787/config=1041
DFT/bulk=fcc/lattice=3.787/config=1042
DFT/bulk=fcc/lattice=3.787/config=1043
DFT/bulk=fcc/lattice=3.787/config=1044
DFT/bulk=fcc/lattice=3.787/config=1045
DFT/bulk=fcc/lattice=3.787/config=1046
DFT/bulk=fcc/lattice=3.787/config=1047
DFT/bulk=fcc/lattice=3.787/config=1048
DFT/bulk=fcc/lattice=3.787/config=1049
DFT/bulk=fcc/lattice=3.787/config=1050
DFT/bulk=fcc/lattice=3.787/config=1051
DFT/bulk=fcc/lattice=3.787/config=1052
DFT/bulk=fcc/lattice=3.787/config=1053
DFT/bulk=fcc/lattice=3.787/config=1054
DFT/bulk=fcc/lattice=3.787/config=1055
DFT/bulk=fcc/lattice=3.787/config=1056
DFT/bulk=fcc/lattice=3.787/config=1057
DFT/bulk=fcc/lattice=3.787/config=1058
DFT/bulk=fcc/lattice=3.787/config=1059
DFT/bulk=fcc/lattice=3.787/config=1060
DFT/bulk=fcc/lattice=3.787/config=1061
DFT/bulk=fcc/lattice=3.787/config=1062
DFT/bulk=fcc/lattice=3.787/config=1063
DFT/bulk=fcc/lattice=3.787/config=1064
DFT/bulk=fcc/lattice=3.787/config=1065
DFT/bulk=fcc/lattice=3.787/config=1066
DFT/bulk=fcc/lattice=3.787/config=1067
DFT/bulk=fcc/lattice=3.787/config=1068
DFT/bulk=fcc/lattice=3.787/config=1069
DFT/bulk=fcc/lattice=3.787/config=1070
DFT/bulk=fcc/lattice=3.787/config=1071
DFT/bulk=fcc/lattice=3.787/config=1072
DFT/bulk=fcc/lattice=3.787/config=1073
DFT/bulk=fcc/lattice=3.787/config=1074
DFT/bulk=fcc/lattice=3.787/config=1075
DFT/bulk=fcc/lattice=3.787/config=1076
DFT/bulk=fcc/lattice=3.787/config=1077
DFT/bulk=fcc/lattice=3.787/config=1078
DFT/bulk=fcc/lattice=3.787/config=1079
DFT/bulk=fcc/lattice=3.787/config=1080
DFT/bulk=fcc/lattice=3.787/config=1081
DFT/bulk=fcc/lattice=3.787/config=1082
DFT/bulk=fcc/lattice=3.787/config=1083
DFT/bulk=fcc/lattice=3.787/config=1084
DFT/bulk=fcc/lattice=3.787/config=1085
DFT/bulk=fcc/lattice=3.787/config=1086
DFT/bulk=fcc/lattice=3.787/config=1087
DFT/bulk=fcc/lattice=3.787/config=1088
DFT/bulk=fcc/lattice=3.787/config=1089
DFT/bulk=fcc/lattice=3.787/config=1090
DFT/bulk=fcc/lattice=3.787/config=1091
DFT/bulk=fcc/lattice=3.787/config=1092
DFT/bulk=fcc/lattice=3.787/config=1093
DFT/bulk=fcc/lattice=3.787/config=1094
DFT/bulk=fcc/lattice=3.787/config=1095
DFT/bulk=fcc/lattice=3.787/config=1096
DFT/bulk=fcc/lattice=3.787/config=1097
DFT/bulk=fcc/lattice=3.787/config=1098
DFT/bulk=fcc/lattice=3.787/config=1099
DFT/bulk=fcc/lattice=3.787/config=1100
DFT/bulk=fcc/lattice=3.787/config=1101
DFT/bulk=fcc/lattice=3.787/config=1102
DFT/bulk=fcc/lattice=3.787/config=1103
DFT/bulk=fcc/lattice=3.787/config=1104
DFT/bulk=fcc/lattice=3.787/config=1105
DFT/bulk=fcc/lattice=3.787/config=1106
DFT/bulk=fcc/lattice=3.787/config=1107
DFT/bulk=fcc/lattice=3.787/config=1108
DFT/bulk=fcc/lattice=3.787/config=1109
DFT/bulk=fcc/lattice=3.787/config=1110
DFT/bulk=fcc/lattice=3.787/config=1111
DFT/bulk=fcc/lattice=3.787/config=1112
DFT/bulk=fcc/lattice=3.787/config=1113
DFT/bulk=fcc/lattice=3.787/config=1114
DFT/bulk=fcc/lattice=3.787/config=1115
DFT/bulk=fcc/lattice=3.787/config=1116
DFT/bulk=fcc/lattice=3.787/config=1117
DFT/bulk=fcc/lattice=3.787/config=1118
DFT/bulk=fcc/lattice=3.787/config=1119
DFT/bulk=fcc/lattice=3.787/config=1120
DFT/bulk=fcc/lattice=3.787/config=1121
DFT/bulk=fcc/lattice=3.787/config=1122
DFT/bulk=fcc/lattice=3.787/config=1123
DFT/bulk=fcc/lattice=3.787/config=1124
DFT/bulk=fcc/lattice=3.787/config=1125
DFT/bulk=fcc/lattice=3.787/config=1126
DFT/bulk=fcc/lattice=3.787/config=1127
DFT/bulk=fcc/lattice=3.787/config=1128
DFT/bulk=fcc/lattice=3.787/config=1129
DFT/bulk=fcc/lattice=3.787/config=1130
DFT/bulk=fcc/lattice=3.787/config=1131
DFT/bulk=fcc/lattice=3.787/config=1132
DFT/bulk=fcc/lattice=3.787/config=1133
DFT/bulk=fcc/lattice=3.787/config=1134
DFT/bulk=fcc/lattice=3.787/config=1135
DFT/bulk=fcc/lattice=3.787/config=1136
DFT/bulk=fcc/lattice=3.787/config=1137
DFT/bulk=fcc/lattice=3.787/config=1138
DFT/bulk=fcc/lattice=3.787/config=1139
DFT/bulk=fcc/lattice=3.787/config=1140
DFT/bulk=fcc/lattice=3.787/config=1141
DFT/bulk=fcc/lattice=3.787/config=1142
DFT/bulk=fcc/lattice=3.787/config=1143
DFT/bulk=fcc/lattice=3.787/config=1144
DFT/bulk=fcc/lattice=3.787/config=1145
DFT/bulk=fcc/lattice=3.787/config=1146
DFT/bulk=fcc/lattice=3.787/config=1147
DFT/bulk=fcc/lattice=3.787/config=1148
DFT/bulk=fcc/lattice=3.787/config=1149
DFT/bulk=fcc/lattice=3.787/config=1150
DFT/bulk=fcc/lattice=3.787/config=1151
DFT/bulk=fcc/lattice=3.787/config=1152
DFT/bulk=fcc/lattice=3.787/config=1153
DFT/bulk=fcc/lattice=3.787/config=1154
DFT/bulk=fcc/lattice=3.787/config=1155
DFT/bulk=fcc/lattice=3.787/config=1156
DFT/bulk=fcc/lattice=3.787/config=1157
DFT/bulk=fcc/lattice=3.787/config=1158
DFT/bulk=fcc/lattice=3.787/config=1159
DFT/bulk=fcc/lattice=3.787/config=1160
DFT/bulk=fcc/lattice=3.787/config=1161
DFT/bulk=fcc/lattice=3.787/config=1162
DFT/bulk=fcc/lattice=3.787/config=1163
DFT/bulk=fcc/lattice=3.787/config=1164
DFT/bulk=fcc/lattice=3.787/config=1165
DFT/bulk=fcc/lattice=3.787/config=1166
DFT/bulk=fcc/lattice=3.787/config=1167
DFT/bulk=fcc/lattice=3.787/config=1168
DFT/bulk=fcc/lattice=3.787/config=1169
DFT/bulk=fcc/lattice=3.787/config=1170
DFT/bulk=fcc/lattice=3.787/config=1171
DFT/bulk=fcc/lattice=3.787/config=1172
DFT/bulk=fcc/lattice=3.787/config=1173
DFT/bulk=fcc/lattice=3.787/config=1174
DFT/bulk=fcc/lattice=3.787/config=1175
DFT/bulk=fcc/lattice=3.787/config=1176
DFT/bulk=fcc/lattice=3.787/config=1177
DFT/bulk=fcc/lattice=3.787/config=1178
DFT/bulk=fcc/lattice=3.787/config=1179
DFT/bulk=fcc/lattice=3.787/config=1180
DFT/bulk=fcc/lattice=3.787/config=1181
DFT/bulk=fcc/lattice=3.787/config=1182
DFT/bulk=fcc/lattice=3.787/config=1183
DFT/bulk=fcc/lattice=3.787/config=1184
DFT/bulk=fcc/lattice=3.787/config=1185
DFT/bulk=fcc/lattice=3.787/config=1186
DFT/bulk=fcc/lattice=3.787/config=1187
DFT/bulk=fcc/lattice=3.787/config=1188
DFT/bulk=fcc/lattice=3.787/config=1189
DFT/bulk=fcc/lattice=3.787/config=1190
DFT/bulk=fcc/lattice=3.787/config=1191
DFT/bulk=fcc/lattice=3.787/config=1192
DFT/bulk=fcc/lattice=3.787/config=1193
DFT/bulk=fcc/lattice=3.787/config=1194
DFT/bulk=fcc/lattice=3.787/config=1195
DFT/bulk=fcc/lattice=3.787/config=1196
DFT/bulk=fcc/lattice=3.787/config=1197
DFT/bulk=fcc/lattice=3.787/config=1198
DFT/bulk=fcc/lattice=3.787/config=1199
DFT/bulk=fcc/lattice=3.787/config=1200
DFT/bulk=fcc/lattice=3.787/config=1201
DFT/bulk=fcc/lattice=3.787/config=1202
DFT/bulk=fcc/lattice=3.787/config=1203
DFT/bulk=fcc/lattice=3.787/config=1204
DFT/bulk=fcc/lattice=3.787/config=1205
DFT/bulk=fcc/lattice=3.787/config=1206
DFT/bulk=fcc/lattice=3.787/config=1207
DFT/bulk=fcc/lattice=3.787/config=1208
DFT/bulk=fcc/lattice=3.787/config=1209
DFT/bulk=fcc/lattice=3.787/config=1210
DFT/bulk=fcc/lattice=3.787/config=1211
DFT/bulk=fcc/lattice=3.787/config=1212
DFT/bulk=fcc/lattice=3.787/config=1213
DFT/bulk=fcc/lattice=3.787/config=1214
DFT/bulk=fcc/lattice=3.787/config=1215
DFT/bulk=fcc/lattice=3.787/config=1216
DFT/bulk=fcc/lattice=3.787/config=1217
DFT/bulk=fcc/lattice=3.787/config=1218
DFT/bulk=fcc/lattice=3.787/config=1219
DFT/bulk=fcc/lattice=3.787/config=1220
DFT/bulk=fcc/lattice=3.787/config=1221
DFT/bulk=fcc/lattice=3.787/config=1222
DFT/bulk=fcc/lattice=3.787/config=1223
DFT/bulk=fcc/lattice=3.787/config=1224
DFT/bulk=fcc/lattice=3.787/config=1225
DFT/bulk=fcc/lattice=3.787/config=1226
DFT/bulk=fcc/lattice=3.787/config=1227
DFT/bulk=fcc/lattice=3.787/config=1228
DFT/bulk=fcc/lattice=3.787/config=1229
DFT/bulk=fcc/lattice=3.787/config=1230
DFT/bulk=fcc/lattice=3.787/config=1231
DFT/bulk=fcc/lattice=3.787/config=1232
DFT/bulk=fcc/lattice=3.787/config=1233
DFT/bulk=fcc/lattice=3.787/config=1234
DFT/bulk=fcc/lattice=3.787/config=1235
DFT/bulk=fcc/lattice=3.787/config=1236
DFT/bulk=fcc/lattice=3.787/config=1237
DFT/bulk=fcc/lattice=3.787/config=1238
DFT/bulk=fcc/lattice=3.787/config=1239
DFT/bulk=fcc/lattice=3.787/config=1240
DFT/bulk=fcc/lattice=3.787/config=1241
DFT/bulk=fcc/lattice=3.787/config=1242
DFT/bulk=fcc/lattice=3.787/config=1243
DFT/bulk=fcc/lattice=3.787/config=1244
DFT/bulk=fcc/lattice=3.787/config=1245
DFT/bulk=fcc/lattice=3.787/config=1246
DFT/bulk=fcc/lattice=3.787/config=1247
DFT/bulk=fcc/lattice=3.787/config=1248
DFT/bulk=fcc/lattice=3.787/config=1249
DFT/bulk=fcc/lattice=3.787/config=1250
DFT/bulk=fcc/lattice=3.787/config=1251
DFT/bulk=fcc/lattice=3.787/config=1252
DFT/bulk=fcc/lattice=3.787/config=1253
DFT/bulk=fcc/lattice=3.787/config=1254
DFT/bulk=fcc/lattice=3.787/config=1255
DFT/bulk=fcc/lattice=3.787/config=1256
DFT/bulk=fcc/lattice=3.787/config=1257
DFT/bulk=fcc/lattice=3.787/config=1258
DFT/bulk=fcc/lattice=3.787/config=1259
DFT/bulk=fcc/lattice=3.787/config=1260
DFT/bulk=fcc/lattice=3.787/config=1261
DFT/bulk=fcc/lattice=3.787/config=1262
DFT/bulk=fcc/lattice=3.787/config=1263
DFT/bulk=fcc/lattice=3.787/config=1264
DFT/bulk=fcc/lattice=3.787/config=1265
DFT/bulk=fcc/lattice=3.787/config=1266
DFT/bulk=fcc/lattice=3.787/config=1267
DFT/bulk=fcc/lattice=3.787/config=1268
DFT/bulk=fcc/lattice=3.787/config=1269
DFT/bulk=fcc/lattice=3.787/config=1270
DFT/bulk=fcc/lattice=3.787/config=1271
DFT/bulk=fcc/lattice=3.787/config=1272
DFT/bulk=fcc/lattice=3.787/config=1273
DFT/bulk=fcc/lattice=3.787/config=1274
DFT/bulk=fcc/lattice=3.787/config=1275
DFT/bulk=fcc/lattice=3.787/config=1276
DFT/bulk=fcc/lattice=3.787/config=1277
DFT/bulk=fcc/lattice=3.787/config=1278
DFT/bulk=fcc/lattice=3.787/config=1279
DFT/bulk=fcc/lattice=3.787/config=1280
DFT/bulk=fcc/lattice=3.787/config=1281
DFT/bulk=fcc/lattice=3.787/config=1282
DFT/bulk=fcc/lattice=3.787/config=1283
DFT/bulk=fcc/lattice=3.787/config=1284
DFT/bulk=fcc/lattice=3.787/config=1285
DFT/bulk=fcc/lattice=3.787/config=1286
DFT/bulk=fcc/lattice=3.787/config=1287
DFT/bulk=fcc/lattice=3.787/config=1288
DFT/bulk=fcc/lattice=3.787/config=1289
DFT/bulk=fcc/lattice=3.787/config=1290
DFT/bulk=fcc/lattice=3.787/config=1291
DFT/bulk=fcc/lattice=3.787/config=1292
DFT/bulk=fcc/lattice=3.787/config=1293
DFT/bulk=fcc/lattice=3.787/config=1294
DFT/bulk=fcc/lattice=3.787/config=1295
DFT/bulk=fcc/lattice=3.787/config=1296
DFT/bulk=fcc/lattice=3.787/config=1297
DFT/bulk=fcc/lattice=3.787/config=1298
DFT/bulk=fcc/lattice=3.787/config=1299
DFT/bulk=fcc/lattice=3.787/config=1300
DFT/bulk=fcc/lattice=3.787/config=1301
DFT/bulk=fcc/lattice=3.787/config=1302
DFT/bulk=fcc/lattice=3.787/config=1303
DFT/bulk=fcc/lattice=3.787/config=1304
DFT/bulk=fcc/lattice=3.787/config=1305
DFT/bulk=fcc/lattice=3.787/config=1306
DFT/bulk=fcc/lattice=3.787/config=1307
DFT/bulk=fcc/lattice=3.787/config=1308
DFT/bulk=fcc/lattice=3.787/config=1309
DFT/bulk=fcc/lattice=3.787/config=1310
DFT/bulk=fcc/lattice=3.787/config=1311
DFT/bulk=fcc/lattice=3.787/config=1312
DFT/bulk=fcc/lattice=3.787/config=1313
DFT/bulk=fcc/lattice=3.787/config=1314
DFT/bulk=fcc/lattice=3.787/config=1315
DFT/bulk=fcc/lattice=3.787/config=1316
DFT/bulk=fcc/lattice=3.787/config=1317
DFT/bulk=fcc/lattice=3.787/config=1318
DFT/bulk=fcc/lattice=3.787/config=1319
DFT/bulk=fcc/lattice=3.787/config=1320
DFT/bulk=fcc/lattice=3.787/config=1321
DFT/bulk=fcc/lattice=3.787/config=1322
DFT/bulk=fcc/lattice=3.787/config=1323
DFT/bulk=fcc/lattice=3.787/config=1324
DFT/bulk=fcc/lattice=3.787/config=1325
DFT/bulk=fcc/lattice=3.787/config=1326
DFT/bulk=fcc/lattice=3.787/config=1327
DFT/bulk=fcc/lattice=3.787/config=1328
DFT/bulk=fcc/lattice=3.787/config=1329
DFT/bulk=fcc/lattice=3.787/config=1330
DFT/bulk=fcc/lattice=3.787/config=1331
DFT/bulk=fcc/lattice=3.787/config=1332
DFT/bulk=fcc/lattice=3.787/config=1333
DFT/bulk=fcc/lattice=3.787/config=1334
DFT/bulk=fcc/lattice=3.787/config=1335
DFT/bulk=fcc/lattice=3.787/config=1336
DFT/bulk=fcc/lattice=3.787/config=1337
DFT/bulk=fcc/lattice=3.787/config=1338
DFT/bulk=fcc/lattice=3.787/config=1339
DFT/bulk=fcc/lattice=3.787/config=1340
DFT/bulk=fcc/lattice=3.787/config=1341
DFT/bulk=fcc/lattice=3.787/config=1342
DFT/bulk=fcc/lattice=3.787/config=1343
DFT/bulk=fcc/lattice=3.787/config=1344
DFT/bulk=fcc/lattice=3.787/config=1345
DFT/bulk=fcc/lattice=3.787/config=1346
DFT/bulk=fcc/lattice=3.787/config=1347
DFT/bulk=fcc/lattice=3.787/config=1348
DFT/bulk=fcc/lattice=3.787/config=1349
DFT/bulk=fcc/lattice=3.787/config=1350
DFT/bulk=fcc/lattice=3.787/config=1351
DFT/bulk=fcc/lattice=3.787/config=1352
DFT/bulk=fcc/lattice=3.787/config=1353
DFT/bulk=fcc/lattice=3.787/config=1354
DFT/bulk=fcc/lattice=3.787/config=1355
DFT/bulk=fcc/lattice=3.787/config=1356
DFT/bulk=fcc/lattice=3.787/config=1357
DFT/bulk=fcc/lattice=3.787/config=1358
DFT/bulk=fcc/lattice=3.787/config=1359
DFT/bulk=fcc/lattice=3.787/config=1360
DFT/bulk=fcc/lattice=3.787/config=1361
DFT/bulk=fcc/lattice=3.787/config=1362
DFT/bulk=fcc/lattice=3.787/config=1363
DFT/bulk=fcc/lattice=3.787/config=1364
DFT/bulk=fcc/lattice=3.787/config=1365
DFT/bulk=fcc/lattice=3.787/config=1366
DFT/bulk=fcc/lattice=3.787/config=1367
DFT/bulk=fcc/lattice=3.787/config=1368
DFT/bulk=fcc/lattice=3.787/config=1369
DFT/bulk=fcc/lattice=3.787/config=1370
DFT/bulk=fcc/lattice=3.787/config=1371
DFT/bulk=fcc/lattice=3.787/config=1372
DFT/bulk=fcc/lattice=3.787/config=1373
DFT/bulk=fcc/lattice=3.787/config=1374
DFT/bulk=fcc/lattice=3.787/config=1375
DFT/bulk=fcc/lattice=3.787/config=1376
DFT/bulk=fcc/lattice=3.787/config=1377
DFT/bulk=fcc/lattice=3.787/config=1378
DFT/bulk=fcc/lattice=3.787/config=1379
DFT/bulk=fcc/lattice=3.787/config=1380
DFT/bulk=fcc/lattice=3.787/config=1381
DFT/bulk=fcc/lattice=3.787/config=1382
DFT/bulk=fcc/lattice=3.787/config=1383
DFT/bulk=fcc/lattice=3.787/config=1384
DFT/bulk=fcc/lattice=3.787/config=1385
DFT/bulk=fcc/lattice=3.787/config=1386
DFT/bulk=fcc/lattice=3.787/config=1387
DFT/bulk=fcc/lattice=3.787/config=1388
DFT/bulk=fcc/lattice=3.787/config=1389
DFT/bulk=fcc/lattice=3.787/config=1390
DFT/bulk=fcc/lattice=3.787/config=1391
DFT/bulk=fcc/lattice=3.787/config=1392
DFT/bulk=fcc/lattice=3.787/config=1393
DFT/bulk=fcc/lattice=3.787/config=1394
DFT/bulk=fcc/lattice=3.787/config=1395
DFT/bulk=fcc/lattice=3.787/config=1396
DFT/bulk=fcc/lattice=3.787/config=1397
DFT/bulk=fcc/lattice=3.787/config=1398
DFT/bulk=fcc/lattice=3.787/config=1399
DFT/bulk=fcc/lattice=3.787/config=1400
DFT/bulk=fcc/lattice=3.787/config=1401
DFT/bulk=fcc/lattice=3.787/config=1402
DFT/bulk=fcc/lattice=3.787/config=1403
DFT/bulk=fcc/lattice=3.787/config=1404
DFT/bulk=fcc/lattice=3.787/config=1405
DFT/bulk=fcc/lattice=3.787/config=1406
DFT/bulk=fcc/lattice=3.787/config=1407
DFT/bulk=fcc/lattice=3.787/config=1408
DFT/bulk=fcc/lattice=3.787/config=1409
DFT/bulk=fcc/lattice=3.787/config=1410
DFT/bulk=fcc/lattice=3.787/config=1411
DFT/bulk=fcc/lattice=3.787/config=1412
DFT/bulk=fcc/lattice=3.787/config=1413
DFT/bulk=fcc/lattice=3.787/config=1414
DFT/bulk=fcc/lattice=3.787/config=1415
DFT/bulk=fcc/lattice=3.787/config=1416
DFT/bulk=fcc/lattice=3.787/config=1417
DFT/bulk=fcc/lattice=3.787/config=1418
DFT/bulk=fcc/lattice=3.787/config=1419
DFT/bulk=fcc/lattice=3.787/config=1420
DFT/bulk=fcc/lattice=3.787/config=1421
DFT/bulk=fcc/lattice=3.787/config=1422
DFT/bulk=fcc/lattice=3.787/config=1423
DFT/bulk=fcc/lattice=3.787/config=1424
DFT/bulk=fcc/lattice=3.787/config=1425
DFT/bulk=fcc/lattice=3.787/config=1426
DFT/bulk=fcc/lattice=3.787/config=1427
DFT/bulk=fcc/lattice=3.787/config=1428
DFT/bulk=fcc/lattice=3.787/config=1429
DFT/bulk=fcc/lattice=3.787/config=1430
DFT/bulk=fcc/lattice=3.787/config=1431
DFT/bulk=fcc/lattice=3.787/config=1432
DFT/bulk=fcc/lattice=3.787/config=1433
DFT/bulk=fcc/lattice=3.787/config=1434
DFT/bulk=fcc/lattice=3.787/config=1435
DFT/bulk=fcc/lattice=3.787/config=1436
DFT/bulk=fcc/lattice=3.787/config=1437
DFT/bulk=fcc/lattice=3.787/config=1438
DFT/bulk=fcc/lattice=3.787/config=1439
DFT/bulk=fcc/lattice=3.787/config=1440
DFT/bulk=fcc/lattice=3.787/config=1441
DFT/bulk=fcc/lattice=3.787/config=1442
DFT/bulk=fcc/lattice=3.787/config=1443
DFT/bulk=fcc/lattice=3.787/config=1444
DFT/bulk=fcc/lattice=3.787/config=1445
DFT/bulk=fcc/lattice=3.787/config=1446
DFT/bulk=fcc/lattice=3.787/config=1447
DFT/bulk=fcc/lattice=3.787/config=1448
DFT/bulk=fcc/lattice=3.787/config=1449
DFT/bulk=fcc/lattice=3.787/config=1450
DFT/bulk=fcc/lattice=3.787/config=1451
DFT/bulk=fcc/lattice=3.787/config=1452
DFT/bulk=fcc/lattice=3.787/config=1453
DFT/bulk=fcc/lattice=3.787/config=1454
DFT/bulk=fcc/lattice=3.787/config=1455
DFT/bulk=fcc/lattice=3.787/config=1456
DFT/bulk=fcc/lattice=3.787/config=1457
DFT/bulk=fcc/lattice=3.787/config=1458
DFT/bulk=fcc/lattice=3.787/config=1459
DFT/bulk=fcc/lattice=3.787/config=1460
DFT/bulk=fcc/lattice=3.787/config=1461
DFT/bulk=fcc/lattice=3.787/config=1462
DFT/bulk=fcc/lattice=3.787/config=1463
DFT/bulk=fcc/lattice=3.787/config=1464
DFT/bulk=fcc/lattice=3.787/config=1465
DFT/bulk=fcc/lattice=3.787/config=1466
DFT/bulk=fcc/lattice=3.787/config=1467
DFT/bulk=fcc/lattice=3.787/config=1468
DFT/bulk=fcc/lattice=3.787/config=1469
DFT/bulk=fcc/lattice=3.787/config=1470
DFT/bulk=fcc/lattice=3.787/config=1471
DFT/bulk=fcc/lattice=3.787/config=1472
DFT/bulk=fcc/lattice=3.787/config=1473
DFT/bulk=fcc/lattice=3.787/config=1474
DFT/bulk=fcc/lattice=3.787/config=1475
DFT/bulk=fcc/lattice=3.787/config=1476
DFT/bulk=fcc/lattice=3.787/config=1477
DFT/bulk=fcc/lattice=3.787/config=1478
DFT/bulk=fcc/lattice=3.787/config=1479
DFT/bulk=fcc/lattice=3.787/config=1480
DFT/bulk=fcc/lattice=3.787/config=1481
DFT/bulk=fcc/lattice=3.787/config=1482
DFT/bulk=fcc/lattice=3.787/config=1483
DFT/bulk=fcc/lattice=3.787/config=1484
DFT/bulk=fcc/lattice=3.787/config=1485
DFT/bulk=fcc/lattice=3.787/config=1486
DFT/bulk=fcc/lattice=3.787/config=1487
DFT/bulk=fcc/lattice=3.787/config=1488
DFT/bulk=fcc/lattice=3.787/config=1489
DFT/bulk=fcc/lattice=3.787/config=1490
DFT/bulk=fcc/lattice=3.787/config=1491
DFT/bulk=fcc/lattice=3.787/config=1492
DFT/bulk=fcc/lattice=3.787/config=1493
DFT/bulk=fcc/lattice=3.787/config=1494
DFT/bulk=fcc/lattice=3.787/config=1495
DFT/bulk=fcc/lattice=3.787/config=1496
DFT/bulk=fcc/lattice=3.787/config=1497
DFT/bulk=fcc/lattice=3.787/config=1498
DFT/bulk=fcc/lattice=3.787/config=1499
DFT/bulk=fcc/lattice=3.787/config=1500
DFT/bulk=fcc/lattice=3.787/config=1501
DFT/bulk=fcc/lattice=3.787/config=1502
DFT/bulk=fcc/lattice=3.787/config=1503
DFT/bulk=fcc/lattice=3.787/config=1504
DFT/bulk=fcc/lattice=3.787/config=1505
DFT/bulk=fcc/lattice=3.787/config=1506
DFT/bulk=fcc/lattice=3.787/config=1507
DFT/bulk=fcc/lattice=3.787/config=1508
DFT/bulk=fcc/lattice=3.787/config=1509
DFT/bulk=fcc/lattice=3.787/config=1510
DFT/bulk=fcc/lattice=3.787/config=1511
DFT/bulk=fcc/lattice=3.787/config=1512
DFT/bulk=fcc/lattice=3.787/config=1513
DFT/bulk=fcc/lattice=3.787/config=1514
DFT/bulk=fcc/lattice=3.787/config=1515
DFT/bulk=fcc/lattice=3.787/config=1516
DFT/bulk=fcc/lattice=3.787/config=1517
DFT/bulk=fcc/lattice=3.787/config=1518
DFT/bulk=fcc/lattice=3.787/config=1519
DFT/bulk=fcc/lattice=3.787/config=1520
DFT/bulk=fcc/lattice=3.787/config=1521
DFT/bulk=fcc/lattice=3.787/config=1522
DFT/bulk=fcc/lattice=3.787/config=1523
DFT/bulk=fcc/lattice=3.787/config=1524
DFT/bulk=fcc/lattice=3.787/config=1525
DFT/bulk=fcc/lattice=3.787/config=1526
DFT/bulk=fcc/lattice=3.787/config=1527
DFT/bulk=fcc/lattice=3.787/config=1528
DFT/bulk=fcc/lattice=3.787/config=1529
DFT/bulk=fcc/lattice=3.787/config=1530
DFT/bulk=fcc/lattice=3.787/config=1531
DFT/bulk=fcc/lattice=3.787/config=1532
DFT/bulk=fcc/lattice=3.787/config=1533
DFT/bulk=fcc/lattice=3.787/config=1534
DFT/bulk=fcc/lattice=3.787/config=1535
DFT/bulk=fcc/lattice=3.787/config=1536
DFT/bulk=fcc/lattice=3.787/config=1537
DFT/bulk=fcc/lattice=3.787/config=1538
DFT/bulk=fcc/lattice=3.787/config=1539
DFT/bulk=fcc/lattice=3.787/config=1540
DFT/bulk=fcc/lattice=3.787/config=1541
DFT/bulk=fcc/lattice=3.787/config=1542
DFT/bulk=fcc/lattice=3.787/config=1543
DFT/bulk=fcc/lattice=3.787/config=1544
DFT/bulk=fcc/lattice=3.787/config=1545
DFT/bulk=fcc/lattice=3.787/config=1546
DFT/bulk=fcc/lattice=3.787/config=1547
DFT/bulk=fcc/lattice=3.787/config=1548
DFT/bulk=fcc/lattice=3.787/config=1549
DFT/bulk=fcc/lattice=3.787/config=1550
DFT/bulk=fcc/lattice=3.787/config=1551
DFT/bulk=fcc/lattice=3.787/config=1552
DFT/bulk=fcc/lattice=3.787/config=1553
DFT/bulk=fcc/lattice=3.787/config=1554
DFT/bulk=fcc/lattice=3.787/config=1555
DFT/bulk=fcc/lattice=3.787/config=1556
DFT/bulk=fcc/lattice=3.787/config=1557
DFT/bulk=fcc/lattice=3.787/config=1558
DFT/bulk=fcc/lattice=3.787/config=1559
DFT/bulk=fcc/lattice=3.787/config=1560
DFT/bulk=fcc/lattice=3.787/config=1561
DFT/bulk=fcc/lattice=3.787/config=1562
DFT/bulk=fcc/lattice=3.787/config=1563
DFT/bulk=fcc/lattice=3.787/config=1564
DFT/bulk=fcc/lattice=3.787/config=1565
DFT/bulk=fcc/lattice=3.787/config=1566
DFT/bulk=fcc/lattice=3.787/config=1567
DFT/bulk=fcc/lattice=3.787/config=1568
DFT/bulk=fcc/lattice=3.787/config=1569
DFT/bulk=fcc/lattice=3.787/config=1570
DFT/bulk=fcc/lattice=3.787/config=1571
DFT/bulk=fcc/lattice=3.787/config=1572
DFT/bulk=fcc/lattice=3.787/config=1573
DFT/bulk=fcc/lattice=3.787/config=1574
DFT/bulk=fcc/lattice=3.787/config=1575
DFT/bulk=fcc/lattice=3.787/config=1576
DFT/bulk=fcc/lattice=3.787/config=1577
DFT/bulk=fcc/lattice=3.787/config=1578
DFT/bulk=fcc/lattice=3.787/config=1579
DFT/bulk=fcc/lattice=3.787/config=1580
DFT/bulk=fcc/lattice=3.787/config=1581
DFT/bulk=fcc/lattice=3.787/config=1582
DFT/bulk=fcc/lattice=3.787/config=1583
DFT/bulk=fcc/lattice=3.787/config=1584
DFT/bulk=fcc/lattice=3.787/config=1585
DFT/bulk=fcc/lattice=3.787/config=1586
DFT/bulk=fcc/lattice=3.787/config=1587
DFT/bulk=fcc/lattice=3.787/config=1588
DFT/bulk=fcc/lattice=3.787/config=1589
DFT/bulk=fcc/lattice=3.787/config=1590
DFT/bulk=fcc/lattice=3.787/config=1591
DFT/bulk=fcc/lattice=3.787/config=1592
DFT/bulk=fcc/lattice=3.787/config=1593
DFT/bulk=fcc/lattice=3.787/config=1594
DFT/bulk=fcc/lattice=3.787/config=1595
DFT/bulk=fcc/lattice=3.787/config=1596
DFT/bulk=fcc/lattice=3.787/config=1597
DFT/bulk=fcc/lattice=3.787/config=1598
DFT/bulk=fcc/lattice=3.787/config=1599
DFT/bulk=fcc/lattice=3.787/config=1600
DFT/bulk=fcc/lattice=3.787/config=1601
DFT/bulk=fcc/lattice=3.787/config=1602
DFT/bulk=fcc/lattice=3.787/config=1603
DFT/bulk=fcc/lattice=3.787/config=1604
DFT/bulk=fcc/lattice=3.787/config=1605
DFT/bulk=fcc/lattice=3.787/config=1606
DFT/bulk=fcc/lattice=3.787/config=1607
DFT/bulk=fcc/lattice=3.787/config=1608
DFT/bulk=fcc/lattice=3.787/config=1609
DFT/bulk=fcc/lattice=3.787/config=1610
DFT/bulk=fcc/lattice=3.787/config=1611
DFT/bulk=fcc/lattice=3.787/config=1612
DFT/bulk=fcc/lattice=3.787/config=1613
DFT/bulk=fcc/lattice=3.787/config=1614
DFT/bulk=fcc/lattice=3.787/config=1615
DFT/bulk=fcc/lattice=3.787/config=1616
DFT/bulk=fcc/lattice=3.787/config=1617
DFT/bulk=fcc/lattice=3.787/config=1618
DFT/bulk=fcc/lattice=3.787/config=1619
DFT/bulk=fcc/lattice=3.787/config=1620
DFT/bulk=fcc/lattice=3.787/config=1621
DFT/bulk=fcc/lattice=3.787/config=1622
DFT/bulk=fcc/lattice=3.787/config=1623
DFT/bulk=fcc/lattice=3.787/config=1624
DFT/bulk=fcc/lattice=3.787/config=1625
DFT/bulk=fcc/lattice=3.787/config=1626
DFT/bulk=fcc/lattice=3.787/config=1627
DFT/bulk=fcc/lattice=3.787/config=1628
DFT/bulk=fcc/lattice=3.787/config=1630
DFT/bulk=fcc/lattice=3.787/config=1631
DFT/bulk=fcc/lattice=3.787/config=1632
DFT/bulk=fcc/lattice=3.787/config=1634
DFT/bulk=fcc/lattice=3.863/config=1259
DFT/bulk=fcc/lattice=3.863/config=1260
DFT/bulk=fcc/lattice=3.863/config=1261
DFT/bulk=fcc/lattice=3.863/config=1284
DFT/bulk=fcc/lattice=3.863/config=1288
DFT/bulk=fcc/lattice=3.863/config=1290
DFT/bulk=fcc/lattice=3.863/config=1291
DFT/bulk=fcc/lattice=3.863/config=1331
DFT/bulk=fcc/lattice=3.863/config=1336
DFT/bulk=fcc/lattice=3.863/config=1337
DFT/bulk=fcc/lattice=3.863/config=1377
DFT/bulk=fcc/lattice=3.863/config=1383
DFT/bulk=fcc/lattice=3.863/config=1384
DFT/bulk=fcc/lattice=3.863/config=1391
DFT/bulk=fcc/lattice=3.863/config=1392
DFT/bulk=fcc/lattice=3.863/config=1393
DFT/bulk=fcc/lattice=3.863/config=1394
DFT/bulk=fcc/lattice=3.863/config=1395
DFT/bulk=fcc/lattice=3.863/config=1397
DFT/bulk=fcc/lattice=3.863/config=1398
DFT/bulk=fcc/lattice=3.863/config=1399
DFT/bulk=fcc/lattice=3.863/config=1400
DFT/bulk=fcc/lattice=3.863/config=1401
DFT/bulk=fcc/lattice=3.863/config=1425
DFT/bulk=fcc/lattice=3.863/config=1427
DFT/bulk=fcc/lattice=3.863/config=1429
DFT/bulk=fcc/lattice=3.863/config=1435
DFT/bulk=fcc/lattice=3.863/config=1436
DFT/bulk=fcc/lattice=3.863/config=1437
DFT/bulk=fcc/lattice=3.863/config=1439
DFT/bulk=fcc/lattice=3.863/config=1455
DFT/bulk=fcc/lattice=3.863/config=1456
DFT/bulk=fcc/lattice=3.863/config=1457
DFT/bulk=fcc/lattice=3.863/config=1461
DFT/bulk=fcc/lattice=3.863/config=1463
DFT/bulk=fcc/lattice=3.863/config=1466
DFT/bulk=fcc/lattice=3.863/config=1469
DFT/bulk=fcc/lattice=3.863/config=1470
DFT/bulk=fcc/lattice=3.863/config=1488
DFT/bulk=fcc/lattice=3.863/config=1489
DFT/bulk=fcc/lattice=3.863/config=1491
DFT/bulk=fcc/lattice=3.863/config=1492
DFT/bulk=fcc/lattice=3.863/config=1493
DFT/bulk=fcc/lattice=3.863/config=1494
DFT/bulk=fcc/lattice=3.863/config=1495
DFT/bulk=fcc/lattice=3.863/config=1501
DFT/bulk=fcc/lattice=3.863/config=1502
DFT/bulk=fcc/lattice=3.863/config=1503
DFT/bulk=fcc/lattice=3.863/config=1512
DFT/bulk=fcc/lattice=3.863/config=1513
DFT/bulk=fcc/lattice=3.863/config=1536
DFT/bulk=fcc/lattice=3.863/config=1537
DFT/bulk=fcc/lattice=3.863/config=1538
DFT/bulk=fcc/lattice=3.863/config=1539
DFT/bulk=fcc/lattice=3.863/config=1541
DFT/bulk=fcc/lattice=3.863/config=1542
DFT/bulk=fcc/lattice=3.863/config=1543
DFT/bulk=fcc/lattice=3.863/config=1544
DFT/bulk=fcc/lattice=3.863/config=1548
DFT/bulk=fcc/lattice=3.863/config=1574
DFT/bulk=fcc/lattice=3.863/config=1575
DFT/bulk=fcc/lattice=3.863/config=1583
DFT/bulk=fcc/lattice=3.863/config=1584
DFT/bulk=fcc/lattice=3.863/config=1595
DFT/bulk=fcc/lattice=3.863/config=1604
DFT/bulk=fcc/lattice=3.863/config=1605
DFT/bulk=fcc/lattice=3.863/config=1606
#+end_example

* AMP
Section for AMP related utilities.

** Preparation tools
Generate a database from a set of DFT calculations and creates the necessary training set from it.

#+BEGIN_SRC python :results silent
#import jbtools.gilgamesh as jb
import jbtools.neural as jbn

# Create the database from the DFT directory
'''
jb.write_database('DFT/bulk=fcc/lattice=3.634', db='networks/db5-bulk/data.db')
jb.write_database('DFT/bulk=fcc/lattice=3.787', db='networks/db5-bulk/data.db')
jb.write_database('DFT/bulk=fcc/lattice=3.863', db='networks/db5-bulk/data.db')
jb.write_database('DFT/bulk=fcc/lattice=3.939', db='networks/db5-bulk/data.db')
'''

# Produce a trainset with 90% of the database calculations
jbn.produce_trainset('networks/db5-bulk/data.db', fraction=0.9)
#+END_SRC

** Running AMP locally
Run AMP on the local machine ONLY. Copy the submit.sh and submit.py files from an existing networks directory to train on node 40 on Gilgamesh.

#+BEGIN_SRC python :results silent
from amp import Amp
from amp.descriptor import Behler
from amp.regression import NeuralNetwork

for n in [6, 8]:
    label = "./networks/db4-bulk/"

    calc = Amp(label=label + "40-{0}-{0}-1/".format(n),
               descriptor=Behler(cutoff=6.5),
               regression=NeuralNetwork(hiddenlayers=(2, n)))

    calc.train(label + "train.db",
               cores=3,
               energy_goal=0.0005,
               extend_variables=False)
#+END_SRC

** Status of network
#+BEGIN_SRC python :results raw
import os
import json

print('|Hidden layers|Iteration|Time|Cost Function|Energy RMSE|Force RMSE|')
print('|-')

for r, d, f in os.walk('networks/db4-bulk/'):
    if 'train-log.txt' in f:
        with open(os.path.join(r, 'train-log.txt'), 'r') as fi:
            v = fi.readlines()[-5].split()

    if 'trained-parameters.json' in f:
        with open(os.path.join(r, 'trained-parameters.json'), 'r') as fi:
            p = json.load(fi)
        n = p['hiddenlayers']
        print('|{0}|{1}|{2}|{3}|{4}|{5}|'.format(n, v[0], v[1], v[2], v[3], v[4]))
#+END_SRC

#+RESULTS:
| Hidden layers                  | Iteration | Time                | Cost Function | Energy RMSE | Force RMSE |
|--------------------------------+-----------+---------------------+---------------+-------------+------------|
| {u'Cu': [2, 8], u'Pd': [2, 8]} |      5146 | 2016-01-25T00:09:08 |     4.787e+00 |   2.539e-03 |  4.025e-01 |
| {u'Cu': [2, 6], u'Pd': [2, 6]} |      6159 | 2016-01-25T07:23:57 |     4.819e+00 |   2.169e-03 |  4.040e-01 |

** Adding AMP energies to database
This code is used to add the energy predictions from various NN to a particular database.

*** db3 unique configurations
#+BEGIN_SRC python :results silent
from ase.db import connect
from ase.io import read
from amp import Amp

images = read('traj/unique-config.db')

with connect('temp/db3-config.db') as db:
 
    for atoms in images:

        data = {}
        for d, l in [[2, 10], [2, 12],
                     [3, 6], [3, 7], [3, 8]]:

            key = 'db{0}-{1}'.format(d, l)
            calc = Amp('networks/db{0}/40-{1}-{1}-1/'.format(d, l))
            atoms.set_calculator(calc)
            data[key] = atoms.get_potential_energy()

        atoms.set_calculator(None)

        db.write(atoms, data=data)
#+END_SRC

*** 5 free-layers -- 2 \times 2 slab
#+BEGIN_SRC python :results silent
from ase.db import connect
from ase.io import read
from amp import Amp

images = read('traj/cfg2x2-5layer.db')

with connect('temp/cfg2x2-5layer-db3.db') as db:
    data = {}
    for atoms in images:
        for l in [6, 7]:

            key = 'db3-{0}'.format(l)
            calc = Amp('networks/db3/40-{0}-{0}-1/'.format(l))
            atoms.set_calculator(calc)
            data[key] = atoms.get_potential_energy()

        atoms.set_calculator(None)
        db.write(atoms, data=data)
#+END_SRC

*** Bulk -- 3 \times 3 \times 3 -- 10 lattice
Here we generate a temporary database of the energy unique EMT configurations and expand it to 10 different lattice constants. Also, predictions from db4 NNs are added for comparison.

#+BEGIN_SRC python :results silent
import numpy as np
from ase.db import connect
from ase.io import read
from amp import Amp
from ase import Atoms
# Pull unique bulk structures predicted from EMT
images = read('traj/unique-bulk.db')

# Create a new temporary database
with connect('temp/bulk-3x3.db') as db:

    # Generate structures at 5 different lattice constants
    for lat in np.linspace(3.634, 3.939, 5):


        f = lat / 3.939

        delta = np.array([[f, 0, 0],
                          [0, f, 0],
                          [0, 0, f]])

        for i, atoms0 in enumerate(images):
            atoms = Atoms.copy(atoms0)
            cell0 = atoms.get_cell()
            atoms.set_cell(np.dot(cell0, delta), scale_atoms=True)

            keys = {'a': lat, 'config':i}

            data = {}
            for l in [8, 10]:
                key = 'NN{0}'.format(l)
                calc = Amp('networks/db4/40-{0}-{0}-1/'.format(l))
                atoms.set_calculator(calc)
                data[key] = atoms.get_potential_energy()

            atoms.set_calculator(None)

            db.write(atoms, key_value_pairs=keys, data=data)
#+END_SRC

* EMT & other
** Unique structure calculator
*** 1 free-layer -- root(7) \times root(7)
This code uses ASAPs EMT calculator to calculate the energy of /all/ permutations given to it. It will then add the energy unique permutations to a trajectory file for later reference.

#+BEGIN_SRC python :results silent
from itertools import product
from ase.lattice.surface import fcc111_root
from asap3 import EMT
from ase import Atoms
from ase.db import connect
from amp.utilities import hash_image

base = fcc111_root('Cu', 7, size=(1, 1, 5), vacuum=6.0, a=3.634)
natoms = [a.index for a in base if a.tag <= 1]
metals = ['Cu', 'Pd']

with connect('traj/unique-1layer.db') as db:
    nrgs = set()
    for i, c in enumerate(product(metals, repeat=len(natoms))):
        atoms0 = Atoms.copy(base)
        for j, s in enumerate(natoms):
            atoms0[s].symbol = c[j]

        atoms = Atoms.copy(atoms0)
        atoms.set_calculator(EMT())
        nrg = round(atoms.get_potential_energy(), 3)
        atoms.set_calculator(None)

        if nrg not in nrgs:
            nrgs.add(nrg)
            db.write(atoms)
#+END_SRC

*** 5 free-layers -- 2 \times 2
#+BEGIN_SRC python :results silent
from itertools import product
from ase.lattice.surface import fcc111
from asap3 import EMT
from ase import Atoms
from ase.db import connect

base = fcc111('Cu', size=(2, 2, 5), vacuum=6.0, a=3.634)
natoms = [a.index for a in base]
metals = ['Cu', 'Pd']

with connect('traj/cfg2x2-5layer.db') as db:
    nrgs = set()
    for i, c in enumerate(product(metals, repeat=len(natoms))):
        atoms0 = Atoms.copy(base)
        for j, s in enumerate(natoms):
            atoms0[s].symbol = c[j]

        atoms = Atoms.copy(atoms0)
        atoms.set_calculator(EMT())
        nrg = round(atoms.get_potential_energy(), 3)
        atoms.set_calculator(None)

        if nrg not in nrgs:
            nrgs.add(nrg)
            db.write(atoms)
#+END_SRC

*** Bulk configurations
#+BEGIN_SRC python :results silent
from ase.lattice.cubic import FaceCenteredCubic
from itertools import product
from asap3 import EMT
from ase import Atoms
from ase.db import connect
import numpy as np

base = FaceCenteredCubic('Cu',
                         directions=[[0, 1, 1],
                                     [1, 0, 1],
                                     [1, 1, 0]],
                         size=(3, 3, 3),
                         latticeconstant=3.939)

natoms = [a.index for a in base]
metals = ['Cu', 'Pd']

with connect('traj/unique-bulk.db') as db:
    nrgs = set()
    for i, c in enumerate(product(metals, repeat=len(natoms))):

        atoms0 = Atoms.copy(base)
        for j, s in enumerate(natoms):
            atoms0[s].symbol = c[j]

        atoms = Atoms.copy(atoms0)
        atoms.set_calculator(EMT())
        nrg = round(atoms.get_potential_energy(), 3)

        atoms.set_calculator(None)

        if nrg not in nrgs:
            nrgs.add(nrg)
            db.write(atoms)
#+END_SRC

** Producing files for predictions
*** Opposite base composition
Each of the unique configurations produced above will also have an Cu based equivalent. We generate those here:

#+BEGIN_SRC python :results silent
from ase.db import connect
from ase.io import read
import numpy as np
from ase.visualize import view

images = read('traj/unique-4layer.db')

with connect('traj/unique-4layer.db') as db:
    for atoms in images:
        symbols = []
        for atom in atoms:
            if atom.symbol == 'Pd':
                symbols += ['Cu']
            else:
                symbols += ['Pd']
        atoms.set_chemical_symbols(symbols)

        db.write(atoms)
#+END_SRC

*** Lattice constant perturbations
#+BEGIN_SRC python :results silent
from ase.db import connect
from ase.io import read
import numpy as np
from amp.utilities import hash_image
from amp import Amp
import os

images = read('traj/unique-4layer.db')
factors = np.linspace(3.634, 3.939, 5)

rp = connect('temp/rep-4layer.db')

hashs = set()
with connect('temp/pred-4layer.db') as db:

    for d in db.select():
        hashs.add(d.hash)

    for x in factors:
        for atoms in images:
            cell = atoms.get_cell()
            f = x / np.linalg.norm(cell[0] / np.sqrt(7) / (0.5**0.5))

            delta = np.array([[f, 0, 0],
                              [0, f, 0],
                              [0, 0, f]])

            atoms.set_cell(np.dot(cell, delta),
                           scale_atoms=True)

            H = hash_image(atoms)
            if H not in hashs:
                hashs.add(H)

                calc = Amp('networks/db2/40-10-10-1/')
                atoms.set_calculator(calc)
                nrg10 = atoms.get_potential_energy()

                calc = Amp('networks/db2/40-12-12-1/')
                atoms.set_calculator(calc)
                nrg12 = atoms.get_potential_energy()
                atoms.set_calculator(None)

                db.write(atoms, hash=H,
                         data={'NN10': nrg10,
                               'NN12': nrg12})
            else:
                rp.write(atoms, hash=H)
#+END_SRC

* Analysis
** Database db0-bct
This database includes the DFT calculations mapping the pathway around the fcc to bcc transition. Other comparisons are also present. The pathway is compared to neural networks of multiple different frameworks.

*** BCT phase transition pathway
Figure ref:fig-db0-bct_fcc-to-bcc shows the energy barrier from fcc to bcc traveling through bct phase space.

#+caption: Neural network comparison to energy pathway of fcc to bcc transition through bct space. Shown for db0-bct networks.
#+label: fig-db0-bct_fcc-to-bcc
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/multinn-path1.png]]

#+BEGIN_SRC python :results silent
import numpy as np
import matplotlib.pyplot as plt
from jasp import *
from neural.bp import BPNeural
from ase.db import connect
from ase.io import write
from glob import glob

db = connect('data-pathway.db')

ca, nrg, img = [], [], []
for d in db.select('gga=PS'):
    atoms = db.get_atoms(d.id)
    img.append(atoms)
    ca.append(d.ca)
    nrg.append(d.total_energy / len(atoms))

plt.figure()
plt.plot(ca, nrg, 'k-', lw=4)
plt.annotate('bcc', xy=(ca[0], nrg[0]),
             xytext=(1.03, -5.248),
             arrowprops=dict(arrowstyle="->",
                             connectionstyle="arc3"),
             size=20,
            )
plt.annotate('fcc', xy=(ca[-1], nrg[-1]),
             xytext=(1.36, -5.225),
             arrowprops=dict(arrowstyle="->",
                             connectionstyle="arc3"),
             size=20,
            )

form = ['#FF0000', '#FF6600', '#FFFF33',
        '#006600', '#00FF00', '#00FFFF',
        '#0000FF', '#9933FF', '#FF0099']

for i, name in enumerate(glob('./networks/db0-bct/*trained-parameters.json')):
    n = name.split('/')[-1].split('-')[0]
    calc = BPNeural(json='{0}'.format(name))

    fit = []
    for atoms in img:
        atoms.set_calculator(calc)
        fit.append(atoms.get_potential_energy() / len(atoms))

    plt.plot(ca, fit, 'o-',
             label='{0}'.format(n),
             color=form[i])
plt.xlabel('c/a ratio')
plt.ylabel('Total energy (eV/atom)')
plt.xlim(ca[0], ca[-1])
plt.legend(loc='best')
plt.tight_layout()
plt.savefig('./images/multinn-path1.png')
#+END_SRC

*** All bulk structures
Figure ref:fig-db0-bct_all-bulk shows the residuals of various NN predictions for all bulk structures in db1. This includes the reaction pathway (section of low error on the end) along with various EOS generated from each of the ATAT predicted alloy structures.

#+caption: Energy differences between DFT and various NN predictions for all bulk structures in db1. Performed for networks generated from db0-bct data.
#+label: fig-db0-bct_all-bulk
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/multinn-differences.png]]

#+BEGIN_SRC python :results silent
import numpy as np
import matplotlib.pyplot as plt
from jasp import *
from neural.bp import BPNeural
from ase.db import connect
from ase.io import write
from glob import glob
import os

db = connect('networks/db1-cln/data.db')

nrg, img, ids = [], [], []
for d in db.select(['gga=PS', 'bulk=bct']):
    atoms = db.get_atoms(d.id)
    img.append(atoms)
    nrg.append(d.total_energy / len(atoms))
    ids.append(d.id)

form = ['#FF0000', '#FF6600', '#FFFF33',
        '#006600', '#00FF00', '#00FFFF',
        '#0000FF', '#9933FF', '#FF0099']

plt.figure()
plt.plot([ids[0], ids[-1]], [0, 0], 'k--', lw=2)

err = {}
for i, name in enumerate(glob('./networks/db0-bct/*trained-parameters.json')):
    n = name.split('/')[-1].split('-')[0]
    calc = BPNeural(json='{0}'.format(name))
    err[n] = []

    dif = []
    for j, atoms in enumerate(img):
        atoms.set_calculator(calc)
        e = atoms.get_potential_energy() / len(atoms)
        difference = e - nrg[j]
        if difference >= 0.1:
            err[n].append(ids[j])
        dif.append(difference)

    plt.plot(ids, dif, 'o',
             label='{0}'.format(n),
             color=form[i])
plt.xlabel('IDs')
plt.ylabel('Energy difference (eV/atom)')
plt.legend(loc='best')
plt.tight_layout()
plt.savefig('./images/multinn-bct.png')
#+END_SRC

** Database db1-train
*** BCT phase transition pathway
#+caption: Neural network comparison to energy pathway of fcc to bcc transition through bct space. Shown for db1-train networks.
#+label: fig-db1-train_fcc-to-bcc
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/rxn-path-db1.png]]

#+BEGIN_SRC python :results silent
import numpy as np
import matplotlib.pyplot as plt
from jasp import *
from neural.bp import BPNeural
from ase.db import connect
from ase.io import write
from glob import glob

db = connect('data-pathway.db')

ca, nrg, img = [], [], []
for d in db.select('gga=PS'):
    atoms = db.get_atoms(d.id)
    img.append(atoms)
    ca.append(d.ca)
    nrg.append(d.total_energy / len(atoms))

plt.figure()
plt.plot(ca, nrg, 'k-', lw=4)

form = ['#FF0000', '#FFFF33',
        '#006600', '#00FFFF',
        '#0000FF', '#FF0099']

for i, name in enumerate(glob('./networks/db1-50Cu/*/parameters-checkpoint.json')):

    n = name.split('/')[-2]
    calc = BPNeural(json='{0}'.format(name))

    fit = []
    for atoms in img:
        atoms.set_calculator(calc)
        fit.append(atoms.get_potential_energy() / len(atoms))

    plt.plot(ca, fit, 'o-',
             label='{0}'.format(n),
             color=form[i])

plt.xlabel('c/a ratio')
plt.ylabel('Total energy (eV/atom)')
plt.xlim(ca[0], ca[-1])
plt.legend(loc='best')
plt.tight_layout()
plt.savefig('./images/rxn-path-db1.png')
#+END_SRC

*** All bulk structures
#+caption: Energy differences between DFT and various NN predictions for all bulk structures in db1. Performed for networks generated from db1-train data.
#+label: fig-db1-train_all-bulk
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/all-db1.png]]

#+BEGIN_SRC python :results silent
import numpy as np
import matplotlib.pyplot as plt
from jasp import *
from neural.bp import BPNeural
from ase.db import connect
from ase.io import write
from glob import glob
import os

db = connect('networks/db1-cln/data.db')

nrg, img, ids = [], [], []
for d in db.select(['gga=PS']):
    atoms = db.get_atoms(d.id)
    img.append(atoms)
    nrg.append(d.total_energy / len(atoms))
    ids.append(d.id)

form = ['#FF0000', '#FFFF33',
        '#006600', '#00FFFF',
        '#0000FF', '#FF0099']

plt.figure()
plt.plot([ids[0], ids[-1]], [0, 0], 'k--', lw=2)

err = {}
for i, name in enumerate(glob('./networks/db1-50Cu/*/parameters-checkpoint.json')):
    n = name.split('/')[-2]
    calc = BPNeural(json='{0}'.format(name))
    err[n] = []

    dif = []
    for j, atoms in enumerate(img):
        atoms.set_calculator(calc)
        e = atoms.get_potential_energy() / len(atoms)
        difference = e - nrg[j]
        if difference >= 0.1:
            err[n].append(ids[j])
        dif.append(difference)

    plt.plot(ids, dif, 'o',
             label='{0}'.format(n),
             color=form[i])
plt.xlabel('IDs')
plt.ylabel('Energy difference (eV/atom)')
plt.legend(loc='best')
plt.tight_layout()
plt.savefig('./images/all-db1.png')
#+END_SRC

*** EOS reproduction
In this section, we reproduce EOS using various NN frameworks of the db1-train database. Figure ref:fig-db1-train_EOS-19 shows an example of an EOS which failed to be fit correctly by all frameworks.

#+caption: Example of reproduced EOS from ATAT structure 19 of the bcc configuration. This structure was not accurately fit to.
#+label: fig-db1-train_EOS-19
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/EOS-19-bcc.png]]

#+BEGIN_SRC python
import numpy as np
import matplotlib.pyplot as plt
from jasp import *
from neural.bp import BPNeural
from ase.db import connect
from glob import glob

db = connect('networks/db1-50Cu/data.db')

cfgs = []
for d in db.select():
    if d.config not in cfgs:
        cfgs.append(d.config)

db = connect('networks/db1-cln/data.db')

bulk = ['fcc', 'bcc']

for cfg in cfgs:
    for b in bulk:
        nrg, img, ids = [], [], []
        try:
            for d in db.select(['config={0}'.format(cfg), 'bulk={0}'.format(b)]):
                atoms = db.get_atoms(d.id)
                img.append(atoms)
                nrg.append(d.total_energy / len(atoms))
                ids.append(d.volume / len(atoms))

            form = ['#FF0000', '#FFFF33',
                    '#006600', '#00FFFF',
                    '#0000FF', '#FF0099']

            f, ax = plt.subplots(2, sharex=True)
            ax[1].plot([ids[0], ids[-1]], [0, 0], 'k--', lw=2)
            ax[0].plot(ids, nrg, 'o', label='DFT', color='k', mfc='none', ms=6)

            err = {}
            for i, name in enumerate(glob('./networks/db1-50Cu/*/parameters-checkpoint.json')):
                n = name.split('/')[-2]
                calc = BPNeural(json='{0}'.format(name))
                err[n] = []

                dif, E = [], []
                for j, atoms in enumerate(img):
                    atoms.set_calculator(calc)
                    e = atoms.get_potential_energy() / len(atoms)
                    E.append(e)
                    difference = e - nrg[j]
                    if difference >= 0.1:
                        err[n].append(ids[j])
                    dif.append(difference)

                ax[0].plot(ids, E, '.',
                           label='{0}'.format(n),
                           color=form[i], alpha=0.5)
                ax[1].plot(ids, dif, '.',
                           label='{0}'.format(n),
                           color=form[i], alpha=0.5)
            ax[1].set_xlabel('Volume ($\AA$/atom)')
            ax[0].set_ylabel('Potential energy (eV/atom)')
            ax[1].set_ylabel('Energy difference (eV/atom)')
            ax[0].legend(loc='best', fontsize=8)
            plt.tight_layout()
            plt.savefig('./images/EOS-{0}-{1}.png'.format(cfg, b))
        except:
            pass
#+END_SRC

** Database db2-surf
*** Residuals
#+caption: Residual errors for the db2-surf training set.
#+label: fig-db2-surf_residual
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/db2-surf.png]]

#+BEGIN_SRC python :results silent
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
from ase.db import connect
from neural.bp import BPNeural
import numpy as np
from glob import glob
from scipy.stats import norm
from matplotlib import gridspec

db = connect('networks/db2-surf/data.db')

img, nrg, ids = [], [], []
for d in db.select():
    img.append(db.get_atoms(d.id))
    nrg.append(d.total_energy / len(d.symbols))
    ids.append(d.id)

calc = BPNeural(json='networks/db2-surf/l3n30i0/parameters-checkpoint.json')

fit = []
for atoms in img:
    atoms.set_calculator(calc)
    fit.append(atoms.get_potential_energy() / len(atoms))
dif = np.array(fit) - np.array(nrg)

RMSE = np.sqrt(sum(dif ** 2) / len(dif))

(mu, sigma) = norm.fit(dif)

fig = plt.figure(figsize=(8, 6)) 
gs = gridspec.GridSpec(1, 2, width_ratios=[2, 1])
ax0 = plt.subplot(gs[0])
ax0.scatter(ids, dif, marker='o', color='k', alpha=0.5)
ax0.plot([0, len(dif)-1], [0, 0], 'r--', lw=2)
ax0.text(len(dif)*0.05, max(abs(dif)), 'RMSE: {0:1.3f}'.format(RMSE), fontsize=15, va='top', ha='left')
ax0.set_xlim(0, len(dif)-1)
ax0.set_ylim(-max(abs(dif))-0.1*max(abs(dif)), max(abs(dif))+0.1*max(abs(dif)))
ax0.set_xlabel('Calculation ID')
ax0.set_ylabel('Energy residual error (eV/atom)')

ax1 = plt.subplot(gs[1])
n, bins, patches = ax1.hist(dif, 20,
                            range=(-max(abs(dif))-0.1*max(abs(dif)),
                                   max(abs(dif))+0.1*max(abs(dif))),
                            normed=True,
                            facecolor='k',
                            alpha=0.5,
                            orientation='horizontal')

y = mlab.normpdf(bins, mu, sigma)
ax1.text(1, max(abs(dif)), '$\mu$: {0:1.3f}'.format(mu), fontsize=15, va='top', ha='left')
ax1.text(1, max(abs(dif))*0.9, '$\sigma$: {0:1.3f}'.format(sigma), fontsize=15, va='top', ha='left')
ax1.plot(y, bins, 'k--', lw=2)
ax1.plot([0, 35], [0, 0], 'r--', lw=2)
ax1.set_xlabel('Probability density')
ax1.set_ylim(-max(abs(dif))-0.1*max(abs(dif)), max(abs(dif))+0.1*max(abs(dif)))
ax1.set_xlim(0, 35)
ax1.set_yticklabels(())

plt.subplots_adjust(left=0.11,
                    bottom=0.09,
                    right=0.97,
                    top=0.97,
                    wspace=0.02,
                    hspace=0.2)

plt.savefig('./images/db2-surf.png')
#+END_SRC

** Database db2
*** Lattice paramteres
In this section, we analyze the difference between energies predicted for various structures between two different neural network frameworks. Each figure demonstrates this effect for a different set of structures. Each set of structures is based on a root(7) \times root(7) fcc(111) surface lattice which is 5 layers deep. The only differences between these structures is the identity of the atoms filling the lattice positions, and also the lattice constant of the unit cell. Five evenly spaced lattice constants were chosen ranging from the lattice constant of bulk fcc Cu (3.634 \AA) to bulk Pd (3.939 \AA). This lattice grids are demonstrated in Figure ref:structure-types.

#+caption: Demonstration of the lattice structures utilized in the following section. The darker the atom, the deeper the layer. Only the 
#+label: structure-types
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 800
[[./images/structure-types.png]]    

#+BEGIN_SRC python :results silent
from ase.visualize import view
from ase.lattice.surface import fcc111_root
from ase.io import write
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
import matplotlib.image as mpimg
import os

lat = np.linspace(3.634, 3.939, 5)

p = np.linspace(0.05, 0.9, 5)

fig = plt.figure(figsize=(8, 3))
ax = fig.add_subplot(111)
for i, a in enumerate(lat):
    atoms = fcc111_root('Cu', root=7,
                        size=(1, 1, 5),
                        vacuum=6.0, a=a)

    col = abs((atoms.get_tags() / 5.0) - 1.0)

    kwargs = {
        'rotation': "-75x",
        'show_unit_cell': 2,
        'colors': np.array([col, col, col]).T,
        'radii': [0.3] * len(atoms)}

    write('images/temp.png', atoms, **kwargs)

    image = mpimg.imread('./images/temp.png')
    imagebox = OffsetImage(image, zoom=0.5)

    ax.add_artist(AnnotationBbox(imagebox,
                                 xy=(0, 0),
                                 xybox=(p[i], 0.5),
                                 pad=-0.2,
                                 frameon=False,
                                 arrowprops=None)
                 )
    ax.text(p[i], -0.13, '{0:1.3f} $\AA$'.format(a),
            va='center', ha='center')
    os.unlink('./images/temp.png')

fig.patch.set_visible(False)
ax.axis('off')
plt.tight_layout()
plt.savefig('images/structure-types.png')
#+END_SRC

*** Slab configurations
For a particular lattice (3.939 \AA), all combinations of Cu and Pd atoms were created for certain numbers of layers starting from the top. This was done for: 1, 2, and 3 layers. In Figure ref:composition-types, one possible configuration for a system where only the top most layer of atoms were allowed to be either Cu or Pd. Once all such configurations were enumerated on a Pd substrate (such a substrate is demonstrated on the right of Figure ref:composition-types), each structures energy was calculated using ASAP (https://wiki.fysik.dtu.dk/asap). Finally, only structures who ASAP energies are unique are kept.

#+caption: Demonstration of the lattice structures utilized in the following section. The darker the atom, the deeper the layer.
#+label: composition-types
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/composition-types.png]]

#+BEGIN_SRC python :results silent
from ase.visualize import view
from ase.lattice.surface import fcc111_root
from ase.io import write
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
import matplotlib.image as mpimg
import os

p = np.linspace(0.2, 0.8, 2)

fig = plt.figure(figsize=(4, 3))
ax = fig.add_subplot(111)
for i, M in enumerate(['Cu', 'Pd']):
    atoms = fcc111_root(M, root=7,
                        size=(1, 1, 5),
                        vacuum=6.0,
                        a=3.787)

    C = [200/255., 129/255., 51/255.] 
    B = [0/255., 105/255., 134/255.]

    if i == 0:
        col = [C] * 31 + [B] * 4
    else:
        col = [B] * 31 + [C] * 4

    kwargs = {
        'rotation': "-75x",
        'show_unit_cell': 2,
        'colors': col,
        'radii': None}

    write('images/temp.png', atoms, **kwargs)

    image = mpimg.imread('./images/temp.png')
    imagebox = OffsetImage(image, zoom=0.6)

    ax.add_artist(AnnotationBbox(imagebox,
                                 xy=(0, 0),
                                 xybox=(p[i], 0.5),
                                 pad=-0.2,
                                 frameon=False,
                                 arrowprops=None))
    os.unlink('./images/temp.png')

fig.patch.set_visible(False)
ax.axis('off')
plt.tight_layout()
plt.savefig('images/composition-types.png')
#+END_SRC

*** NN framework differences
For a single layer of configurations then, there are $2^{7}$ (128) possible configurations of atoms of the top most layer. Only 8 of these configurations are predicted to be energy unique by ASAP. Each of those configurations is energy unique for a Pd substrate, so we end up with twice as many unique configurations if we consider a Cu substrate as well. The result is 8 \times 2 (16) energy unique configurations on Cu and Pd substrate, and 16 \times 5 (80) total configurations with lattice constant ranging from 3.634 - 3.939 \AA.

From the two neural network trained, the difference between the energies predicted by the two systems can then be taken and used to determine the dependability of the fit for a wide range of different configurations.

#+caption: NN predicted energy differences for unique energy configurations of a root(7) \times root(7) slab. 1 layer is allowed to change its chemical composition.
#+label: fig-1layer-db0
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/db0-1layer.png]]

#+caption: NN predicted energy differences for unique energy configurations of a root(7) \times root(7) slab. 2 layers are allowed to change their chemical composition.
#+label: fig-2layer-db0
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/db0-2layer.png]]

#+caption: NN predicted energy differences for unique energy configurations of a root(7) \times root(7) slab. 3 layers are allowed to change their chemical composition.
#+label: fig-3layer-db0
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/db0-3layer.png]]

#+caption: NN predicted energy differences for unique energy configurations of a root(7) \times root(7) slab. 4 layers are allowed to change their chemical composition.
#+label: fig-4layer-db0
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/db0-4layer.png]]

To determine which structures AMP considers to be unique, we use the hashing method it utilizes to assign a simple hash to each atoms object. If we combine all of the unique hashes from the unique configurations shown above, Figure ref:fig-alayer-db0 is produced. We observe that the ASAP-EMT calculator eliminates a large number of unique configurations when the data set becomes quite large. Regardless, we observe that the results are well predicted in most cases.

#+caption: NN predicted energy differences for all unique energy configurations shown above which have a unique hash.
#+label: fig-alayer-db0
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/db0-alayer.png]]

#+BEGIN_SRC python :results silent
from ase.db import connect
from amp import Amp
import numpy as np
import matplotlib.pyplot as plt

db = connect('temp/pred-config.db')

E = []
for d in db.select():
    E += [abs(d.data.NN10 / d.natoms - d.data.NN12 / d.natoms)]
E = np.array(E)

def nbins(x):
    from math import log10, floor, ceil
    p = -int(floor(log10(x)) - 2)
    w = ceil(x*10**p) / ceil(x*10**p)*10**-p
    m = ceil(x*10**p)
    return np.arange(0, m*w, w)

plt.figure(figsize=(6, 4))
n, bins, patches = plt.hist(E, bins=nbins(max(E)))
plt.xlabel('Predicted energy difference (eV/atom)')
plt.ylabel('Probability')
plt.xlim(0, nbins(max(E)).max())
plt.title('{0} total calculations'.format(len(E)))
plt.tight_layout()
plt.savefig('./images/db0-alayer.png')
#+END_SRC

** Database db3
*** Residuals of db2 configurations
#+caption: Predicted energy differences between db3 frameworks for all unique energy configurations.
#+label: fig-alayer-db3
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/db3-alayer.png]]

#+BEGIN_SRC python ;results silent
from ase.db import connect
from amp import Amp
import numpy as np
import matplotlib.pyplot as plt

db = connect('temp/db3-config.db')

E = []
for d in db.select():
    E += [abs(d.data['db3-6'] / d.natoms - d.data['db3-7'] / d.natoms)]
E = np.array(E)

def nbins(x):
    from math import log10, floor, ceil
    w = ceil(x*10**3) / ceil(x*10**3)*10**-3
    m = ceil(x*10**3)
    return np.arange(0, (m*w)+w, w)

plt.figure(figsize=(6, 4))
n, bins, patches = plt.hist(E, bins=nbins(max(E)))
plt.xlabel('Predicted energy difference (eV/atom)')
plt.ylabel('Probability')
plt.xlim(0, 0.111)
plt.ylim(0, 15000)
plt.title('{0} total calculations'.format(len(E)))
plt.tight_layout()
plt.savefig('./images/db3-alayer.png')
#+END_SRC

*** 5 free-layer -- 2 \times 2 slab
In Figure ref:fig-db3-2x2-5layer we demonstrate that every unique configuration predicted by ASAP-EMT is for a 2\times2 fcc(111) slab is well predicted by the db3 NNs as well. This demonstrates that we can accurately reproduce the energies of any simpler configuration of atoms. Interestingly, this also demonstrates the NNs ability to extrapolate to configurations which differ in the 5th layer as well, at least for small, relatively simple configurations.

#+caption: db3 NN predicted differences in energy for all 2 \times 2 unique energy configurations of a 5 layer fcc(111) slab.
#+label: fig-db3-2x2-5layer
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/cfg2x2-5layer-db3.png]]

#+BEGIN_SRC python ;results silent
from ase.db import connect
from amp import Amp
import numpy as np
import matplotlib.pyplot as plt

db = connect('temp/cfg2x2-5layer-db3.db')

E = []
for d in db.select():
    E += [abs(d.data['db3-6'] / d.natoms - d.data['db3-7'] / d.natoms)]
E = np.array(E)

def nbins(x):
    from math import log10, floor, ceil
    w = ceil(x*10**3) / ceil(x*10**3)*10**-3
    m = ceil(x*10**3)
    return np.arange(0, (m*w)+w, w)

plt.figure(figsize=(6, 4))
n, bins, patches = plt.hist(E, bins=nbins(max(E)))
plt.xlabel('Predicted energy difference (eV/atom)')
plt.ylabel('Probability')
plt.title('{0} total calculations'.format(len(E)))
plt.tight_layout()
plt.savefig('./images/cfg2x2-5layer-db3.png')
#+END_SRC

** Database db4
This database includes all calculations from db3, plus additional calculations of bulk structures of a 3 \times 3 \times 3 primitive fcc unit cell. Only the bulk configurations predicted to be energy unique by EMT are included and only at lattice constants of 3.634 and 3.939 \AA.

*** Bulk configurations in db4
#+caption: Energy differences between db4 NN frameworks for energy unique bulk configurations at 10 lattice constants.
#+label: fig-db4_bulk_10lat
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/db4_bulk.png]]

#+BEGIN_SRC python :results silent
from ase.io import read
from amp import Amp
import numpy as np
import matplotlib.pyplot as plt

images = read('networks/db4-bulk/data.db')

dE = []
for atoms in images:
    calc = Amp('networks/db4/40-8-8-1/')
    atoms.set_calculator(calc)
    E8 = atoms.get_potential_energy()

    calc = Amp('networks/db4/40-10-10-1/')
    atoms.set_calculator(calc)
    E10 = atoms.get_potential_energy()

    dE += [abs(E8 / len(atoms) - E10 / len(atoms))]
dE = np.array(dE)

def nbins(x):
    from math import log10, floor, ceil
    n = 4
    w = ceil(x*10**n) / ceil(x*10**n)*10**-n
    m = ceil(x*10**n)
    return np.arange(0, (m*w)+w, w)

plt.figure(figsize=(6, 4))
n, bins, patches = plt.hist(dE, bins=nbins(max(dE)))
plt.xlabel('Predicted energy difference (eV/atom)')
plt.ylabel('Probability')
plt.title('{0} total calculations'.format(len(dE)))
plt.tight_layout()
plt.savefig('./images/db4_bulk.png')
#+END_SRC

*** Bulk configurations at 5 lattice constants
#+caption: Energy differences between db4 NN frameworks for energy unique bulk configurations at 10 lattice constants.
#+label: fig-db4_bulk_10lat
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/db4_bulk_10lat.png]]

#+BEGIN_SRC python
from ase.db import connect
import numpy as np
import matplotlib.pyplot as plt

db = connect('temp/bulk-3x3.db')

E = []
for d in db.select():
    E += [abs(d.data['NN8'] / d.natoms - d.data['NN10'] / d.natoms)]
E = np.array(E)

def nbins(x):
    from math import log10, floor, ceil
    n = 2
    w = ceil(x*10**n) / ceil(x*10**n)*10**-n
    m = ceil(x*10**n)
    return np.arange(0, (m*w)+w, w)



plt.figure(figsize=(6, 4))
n, bins, patches = plt.hist(E, bins=nbins(max(E)))
print n
plt.xlabel('Predicted energy difference (eV/atom)')
plt.ylabel('Probability')
plt.title('{0} total calculations'.format(len(E)))
plt.tight_layout()
plt.savefig('./images/db4_bulk_10lat.png')
#+END_SRC

#+RESULTS:
: [ 4931.  1037.   556.   124.   124.   248.   628.   526.     6.]

* Scratch Pad
** Making temp file for db4 NN predictions
Create a temporary database which will contain the NN calculations for all of the db4 data.

#+BEGIN_SRC python :results silent
from ase.db import connect
from amp import Amp

db = connect('temp/db4.db')

with connect('temp/db4b.db') as dbm:
    for d in db.select():
        atoms = db.get_atoms(d.id)

        calc = Amp('networks/db4-bulk/40-6-6-1/')
        atoms.set_calculator(calc)
        E8 = atoms.get_potential_energy()

        calc = Amp('networks/db4-bulk/40-8-8-1/')
        atoms.set_calculator(calc)
        E10 = atoms.get_potential_energy()

        data = d.data
        data.update({'NN6b': E8, 'NN8b': E10})
        
        dbm.write(d,
                  key_value_pairs=d.key_value_pairs,
                  data=data)
#+END_SRC

** Statistical analysis

#+caption: Statisitcal analysis of the db4 data. 3 Standard deviations of the data are shown for the residual errors of two frameworks and the difference between the predictions made by those frameworks. The actual outliers (~A), predicted outliers (~B), and outliers that are correctly predicted (~A & ~B) are shown in the lower left for \pm 3 \sigma.
#+label: fig-pred-corr
#+attr_latex: :width 5in :placement [H]
#+attr_org: :width 500
[[./images/prediction-correlation.png]]

#+BEGIN_SRC python :results silent
from ase.db import connect
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import norm
from matplotlib import gridspec
from matplotlib.path import Path
import matplotlib.patches as patches

db = connect('temp/db4.db')

Qe, n8, n10 = [], [], []
for d in db.select('train_set'):
    n8 += [d.data.NN8 / d.natoms]
    n10 += [d.data.NN10 / d.natoms]
    Qe += [d.energy / d.natoms]

Qe = np.array(Qe)
n8 = np.array(n8)
n10 = np.array(n10)

# Calculate the differences between 
dQ8 = n8 - Qe
dQ10 = n10 - Qe
dn = n10 - n8

x = np.linspace(-0.012, 0.012)

# I'm looking to solve the least squares regression of the
# function y = mx, we do this here by setting b = 0.
A = np.vstack([dn, np.zeros(len(dn))]).T
f8 = np.poly1d(np.linalg.lstsq(A, dQ8)[0])

A = np.vstack([dn, np.zeros(len(dn))]).T
f10 = np.poly1d(np.linalg.lstsq(A, dQ10)[0])

# Now we solve for the Pearson product-moment correlation coefficients
cov8 = np.corrcoef(dn, dQ8)[0][1]
cov10 = np.corrcoef(dn, dQ10)[0][1]

# Calculate the RMSE of the residuals
rmse = [np.sqrt((dQ8**2).mean()),
        np.sqrt((dQ10**2).mean())]

# Standard deviation of the framework difference
std = np.std(dn)

# here we sample a region around some tolerance to see the number of points which
# fall within it

# A certain number of standard devaitions
tol = 3
err = std * int(tol)

verts = [(-0.012, -err),
         (0.012, -err),
         (0.012, err),
         (-0.012, err),
         (0., 0.)]
codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]
path = Path(verts, codes)

Nc8 = path.contains_points(zip(dn, dQ8))
Ni8 = float(sum(Nc8)) / len(Nc8)

Nc10 = path.contains_points(zip(dn, dQ10))
Ni10 = float(sum(Nc10)) / len(Nc10)

# Now sample the same error range in the x-coordinate for overlap
verts2 = [(-err, -0.012),
          (err, -0.012),
          (err, 0.012),
          (-err, 0.012),
          (0., 0.)]
path2 = Path(verts2, codes)

xNc8 = path2.contains_points(zip(dn, dQ8))
xNi8 = float(sum(xNc8)) / len(xNc8)

xNc10 = path2.contains_points(zip(dn, dQ10))
xNi10 = float(sum(xNc10)) / len(xNc10)

fig, ax1 = plt.subplots()
plt.text(-0.0065, 0.0095, 'Correlation\ncoefficients',
         ha='right', fontsize=14)
plt.text(-0.0075, 0.0085, '{:1.3f}'.format(cov8),
         color='b', ha='right', fontsize=14)
plt.text(-0.0075, 0.0075, '{:1.3f}'.format(cov10),
         color='r', ha='right', fontsize=14)

plt.text(0, 0.0095, 'RMSE', ha='center', fontsize=14)
plt.text(0, 0.0085, '{0:1.2e}'.format(rmse[0]), color='b', ha='center', fontsize=14)
plt.text(0, 0.0075, '{0:1.2e}'.format(rmse[1]), color='r', ha='center', fontsize=14)

patch = patches.PathPatch(path, facecolor='m', edgecolor='m', alpha=0.3)
ax1.add_patch(patch)

patch2 = patches.PathPatch(path2, facecolor='c', edgecolor='c', alpha=0.3)
ax1.add_patch(patch2)

plt.plot([-0.012, 0.012], [-0.012, 0.012], 'k--', lw=2)
ax1.plot(dn, dQ8, 'bo', alpha=0.5)
ax1.plot(x, f8(x), 'b--', lw=2)

ax2 = ax1.twinx()
ax2.plot(dn, dQ10, 'ro', alpha=0.5)
ax2.plot(x, f10(x), 'r--', lw=2)

plt.text(-0.01, err - 0.0005, '$\pm$ {} $\sigma$'.format(int(tol)),
         va='top', ha='center', fontsize=14)
plt.text(-0.01, err - 0.0015, '{:1.1%}'.format(Ni8), color='r',
         va='top', ha='center', fontsize=14)
plt.text(-0.01, err - 0.0025, '{:1.1%}'.format(Ni10), color='b',
         va='top', ha='center', fontsize=14)

plt.text(err - 0.0015, -0.008, '$\pm$ {} $\sigma$'.format(int(tol)),
         va='top', ha='center', fontsize=14)
plt.text(err - 0.0015, -0.009, '{:1.1%}'.format(xNi8), color='r',
         va='top', ha='center', fontsize=14)
plt.text(err - 0.0015, -0.010, '{:1.1%}'.format(xNi10), color='b',
         va='top', ha='center', fontsize=14)

plt.text(0.0035, -0.0075, 'Outliers:', fontsize=14)
plt.text(0.0035, -0.0085, '~A', color='m', fontsize=14)
plt.text(0.0057, -0.0085, '~B', color='c', fontsize=14)
plt.text(0.0079, -0.0085, '~A & ~B', fontsize=14)
plt.text(0.0035, -0.0095, '{:<8} {:<8} {:<8}'.format(sum(~Nc8), sum(~xNc8), sum(~Nc8 * ~xNc8)),
         color='b', fontsize=14)
plt.text(0.0035, -0.0105, '{:<8} {:<8} {:<8}'.format(sum(~Nc10), sum(~xNc10), sum(~Nc10 * ~xNc10)),
         color='r', fontsize=14)

ax1.tick_params(axis='y', colors='b')
ax2.tick_params(axis='y', colors='r')

ax1.set_ylabel('40-8-8-1 residual error (eV/atom)', color='b', fontsize=14)
ax2.set_ylabel('40-10-10-1 residual error (eV/atom)', color='r', fontsize=14)

ax1.set_ylim(-0.012, 0.012)
ax2.set_ylim(-0.012, 0.012)

ax1.set_xlabel('Framework difference (eV/atom)')
plt.xlim(-0.012, 0.012)
plt.tight_layout()
plt.savefig('./images/prediction-correlation.png')
#+END_SRC

#+caption: Relation of correctly predicted outliers to standard deviations of calculations. This is a representation of the cost to benefit of restarting a set of calculations.
#+label: fig-cost-benif
#+attr_latex: :width 5in :placement [H]
#+attr_org: :width 500
[[./images/cost-benefit.png]]

#+BEGIN_SRC python :results silent
from ase.db import connect
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import norm
from matplotlib import gridspec
from matplotlib.path import Path
import matplotlib.patches as patches

db = connect('temp/db4.db')

Qe, n8, n10 = [], [], []
for d in db.select('train_set'):
    n8 += [d.data.NN8 / d.natoms]
    n10 += [d.data.NN10 / d.natoms]
    Qe += [d.energy / d.natoms]

Qe = np.array(Qe)
n8 = np.array(n8)
n10 = np.array(n10)

# Calculate the differences between 
dQ8 = n8 - Qe
dQ10 = n10 - Qe
dn = n10 - n8

codes = [Path.MOVETO,
         Path.LINETO,
         Path.LINETO,
         Path.LINETO,
         Path.CLOSEPOLY]

fig, ax1 = plt.subplots()

x = np.linspace(0, 4.0, 81)

for E, c, label in [[dQ8, 'b', '40-8-8-1'], [dQ10, 'r', '40-10-10-1']]:
    
    y = []
    cost = []
    for tol in x:
        err = np.std(dn) * tol

        vertx = [(-err, -0.012),
                 (err, -0.012),
                 (err, 0.012),
                 (-err, 0.012),
                 (0., 0.)]
        verty = [(-0.012, -err),
                 (0.012, -err),
                 (0.012, err),
                 (-0.012, err),
                 (0., 0.)]

        pathx = Path(vertx, codes)
        px = pathx.contains_points(zip(dn, E))

        pathy = Path(verty, codes)
        py = pathy.contains_points(zip(dn, E))

        pred = sum(~px)
        true = sum(~py)
        pos = sum(~px * ~py)
        ROS = pos / float(true)

        cost += [pred]
        y += [ROS]


    cost = np.array(cost) / float(cost[0])
    ax1.plot(cost, y, '{}-'.format(c), label=label)

ax2 = ax1.twiny()

ax2.plot(x, np.zeros(len(x)))
ax2.invert_xaxis()
ax2.set_xlabel('Standard deviations')

plt.legend(loc='best')

ax1.plot([0, 1], [0, 1], 'k--')
ax1.set_xlabel('Cost fraction')
ax1.set_ylabel('Fraction of positive outliers')
plt.tight_layout()
plt.savefig('./images/cost-benefit.png')
#+END_SRC

** monte carlo simulation


[[./images/MC-spin-20.png]]

[[./images/MC-spin.png]]

#+BEGIN_SRC python :results raw
func = """
import matplotlib.pyplot as plt
import numpy as np

def ising(N, T):
    J = 1  # Strength of interaction (Joules)
    k = 1  # J/K

    # Generate random initial configuration

    grid = (np.random.ranf(size=(N, N)) > 0.5) * 2 - 1

    # Evaluate the system for a fixed number of steps

    for i in range(1000):
        # Calculate the number of neighbors for each cell
        neighbors = np.roll(grid, 1, axis=1) + \
                    np.roll(grid, -1, axis=1) + \
                    np.roll(grid, 1, axis=0) + \
                    np.roll(grid, -1, axis=0)


        # Calculate energy change from spin flip
        dE = 2 * J * (grid * neighbors)

        # Calculate the transition probability
        P = np.exp(-dE/(k * T))

        # Transition which will occur
        transitions = np.random.random(size=(N, N)) < P


        # Screen all but 10% of transitions
        screen = (np.random.random(size=(N, N)) < 0.1)


        transitions = (transitions * screen) * -2 + 1

        # Perform the transitions
        grid = grid * transitions

        # Sum variables of interest
        M = grid.sum() / (N**2.)
        E = -dE.sum() / 2 / (N**2.)

    return M, E

n_grid = 20
Ms, Ts, Es = [], [], []

for i in range(1000):
    # Random temperature from 0 - 5
    T = np.random.random() * 5 + 1e-10

    M, E = ising(n_grid, T)

    Ms += [M]
    Es += [E]
    Ts += [T]

plt.figure()
plt.scatter(Ts, Ms)
plt.xlim(0, 5)
plt.ylim(-1, 1)
plt.title('20 x 20 grid')
plt.xlabel('inverse beta (J)')
plt.ylabel('Average spin')
plt.savefig('images/MC-spin-20.png')
"""

import timeit

time = timeit.timeit(func, number=1) / 60.
print('1 million calculations on 20 x 20 grid in {:1.1f} min'.format(time))
#+END_SRC

#+RESULTS:
1 million calculations on 20 x 20 grid in 1.6 min
1 million calculations on 50 x 50 grid in 3.9 min

#+BEGIN_SRC python
import matplotlib.pyplot as plt

plt.plot([0], [1], 'bo')
plt.xlabel('$\beta$')
plt.show()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
from mpl_toolkits.mplot3d import Axes3D

k = 1  # Normalized by Boltzmann cosntant J / K

temps = np.linspace(0.6, 1, 100)
nrgs = np.linspace(-1, 1, 100)
T, E = np.meshgrid(temps, nrgs)
P = np.exp(-E/(k * T))

fig = plt.figure()
ax = fig.gca(projection='3d')

ax.plot_surface(T, E, P) 

ax.set_xlabel('Boltzmann normalized temperature (K)')
ax.set_ylabel('Energy (eV)')
ax.set_zlabel('Probability distribution')
plt.show()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python
import numpy as np
import matplotlib.pyplot as plt

SIZE = 5
STEPS = 1
T = 1

def bc(i):
    if i+1 > SIZE-1:
        return 0
    if i-1 < 0:
        return SIZE-1
    else:
        return i
    

def delta_energy(system, N, M):
    return -1 * system[N,M] * (system[bc(N-1), M] \
                               + system[bc(N+1), M] \
                               + system[N, bc(M-1)] \
                               + system[N, bc(M+1)])


def build_system():
    system = np.random.random_integers(0, 1, (SIZE, SIZE))
    system[system==0] =- 1

    return system


def main(T, N=500):
    B = 1. / (k * T)

    ## define the initial atoms object
    # atoms = [DEFINE ATOMS]
    # index = atoms.get_index()

    ## Calculate the initial energy and store it
    # Ei = atoms.get_potential_energy()

    ## Perform MC steps
    for i in range(N):

        ## Choose a random atom
        # n = random.choice(index)

        # new_atoms = Atoms.copy(atoms)

        ## Change atom chemical symbol
        # if new_atoms[n].symbol == 'Cu':
        #     new_atoms[n].symbol == 'Pd'
        # else:
        #     new_atoms[n].symbol == 'Cu'

        ## Calculate the energy of the new system
        # Ef = new_atoms.get_potential_energy()

        if Ef <= Ei:
            system[N, M] *= -1
        elif np.exp(-Ef * B) > np.random.rand():
            system[N, M] *= -1

system = build_system()

M = np.random.randint(0, SIZE)
N = np.random.randint(0, SIZE)
print M, N
print('\nsystem')
print system
print('\nrandom point')
print system[N, M]
print('\nneighbors')
print system[bc(N - 1), M]
print system[bc(N + 1), M]
print system[N, bc(M - 1)]
print system[N, bc(M + 1)]
print('\ndE')
print delta_energy(system, N, M)
#+END_SRC

#+RESULTS:
#+begin_example
0 2

system
[[ 1  1  1  1  1]
 [ 1 -1  1  1 -1]
 [ 1  1 -1  1  1]
 [ 1 -1  1 -1  1]
 [ 1 -1 -1 -1  1]]

random point
1

neighbors
1
1
1
1

dE
-4
#+end_example

** BCT via EMT

#+caption: EMT predicted equation of states for the fcc and bcc configurations.
#+label: fig-emt-eos
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/EMT-EOS.png]]

#+name: EMT-minimum-lattice-constants
#+BEGIN_SRC python
from ase.lattice.tetragonal import CenteredTetragonal as bct
import numpy as np
from asap3 import EMT
import matplotlib.pyplot as plt

A = np.linspace(2.4, 3.2, 1000)
CA = {'fcc':np.sqrt(2), 'bcc':1.0}

plt.figure()
nrg = {}
for name, ca in CA.iteritems():

    nrg[name] = []

    for a in A:
        atoms = bct('Cu', latticeconstant={'a': a, 'c/a': ca})
        atoms[1].symbol = 'Pd'

        atoms.set_calculator(EMT())
        nrg[name] += [atoms.get_potential_energy()]

Emin = [min(l) for l in nrg.values()]
dEmin = (max(Emin) - min(Emin))

Amin = [A[Es.index(min(Es))] for Es in nrg.values()]
print(Amin)

plt.plot(A, nrg['fcc'], 'g-')
plt.text(Amin[0], Emin[0], 'fcc', ha='center', va='top', color='g', size=20)
plt.plot(A, nrg['bcc'], 'b-')
plt.text(Amin[1], Emin[1], 'bcc', ha='center', va='top', color='b', size=20)
plt.xlim(2.55, 3.05)
plt.ylim(-0.08, -0.02)
plt.xlabel('bcc lattice constant, a ($\AA$)')
plt.ylabel('Potential energy (eV)')
plt.tight_layout()
plt.savefig('./images/EMT-EOS.png')
#+END_SRC

#+caption: 3D Minimum energy pathway of transition through bct geometry space as predicted by EMT.
#+label: fig-3d-cupd-min-emt
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/3D-EMT-pathway.png]]

#+caption: 2D Minimum energy pathway of transition through bct geometry space as predicted by EMT.q
#+label: fig-2d-cupd-min-emt
#+attr_latex: :width 4in :placement [H]
#+attr_org: :width 400
[[./images/2D-EMT-pathway.png]]

#+RESULTS: EMT-minimum-lattice-constants
: [2.6506506506506504, 2.9709709709709711]

#+BEGIN_SRC python :results silent :var eos=EMT-minimum-lattice-constants
from ase.lattice.tetragonal import CenteredTetragonal as bct
import numpy as np
from asap3 import EMT
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import axes3d
from matplotlib import cm

aref = [float(eos) for eos in eos[1:-2].split(',')]

# Create a list of sample points
ca0 = np.linspace(0.9, 1.5, 98)
ca0 = np.append(ca0, [1.0, np.sqrt(2)])
a0 = np.linspace(2.5, 3.1, 98)
a0 = np.append(a0, [aref[0], aref[1]])

a0 = np.unique(a0)
ca0 = np.unique(ca0)

X, Y = np.meshgrid(a0, ca0)

xifcc = list(X[0]).index(aref[0])
yifcc = list(Y.T[0]).index(np.sqrt(2))

xibcc = list(X[0]).index(aref[1])
yibcc = list(Y.T[0]).index(1.0)

Z = np.zeros(X.shape)

for i, a in enumerate(a0):

    for j, ca in enumerate(ca0):

        # Generate structure based on sample points
        atoms = bct('Cu', latticeconstant={'a': a, 'c/a': ca})
        atoms[1].symbol = 'Pd'

        atoms.set_calculator(EMT())
        Z[j][i] += [atoms.get_potential_energy()]

eminZ, cminZ, aminZ = [], [], []
for i, c in enumerate(ca0[yibcc:yifcc+1]):
    data = Z[i+yibcc, :]
    ind = list(data).index(min(data))

    eminZ.append(min(data))
    cminZ.append(c)
    aminZ.append(a0[ind])

delta = (max(eminZ) - min(eminZ))
rng = [min(eminZ), max(eminZ) + delta]

Z[Z > rng[1]] = np.nan

fig = plt.figure(figsize=(8, 6))
ax = fig.gca(projection='3d')
CM = cm.autumn
cset = ax.contourf(X, Y, Z, zdir='z', offset=rng[0] - delta, cmap=CM, vmin=rng[0], vmax=rng[1])

ax.plot_surface(X, Y, Z,
                rstride=1,
                cstride=1,
                cmap=CM,
                linewidth=0,
                vmin=rng[0],
                vmax=rng[1])

ax.scatter(aminZ[1:-1], cminZ[1:-1], eminZ[1:-1], c='k')

ax.plot([aref[0], aref[0]], [np.sqrt(2), np.sqrt(2)], [rng[0] - delta, eminZ[-1]], 'go-', zorder=99)
ax.text(aref[0], np.sqrt(2), eminZ[-1]+0.01, 'fcc', color='g', zorder=99, size='large')

ax.plot([aref[1], aref[1]], [1.0, 1.0], [rng[0] - delta, eminZ[0]], 'bo-', zorder=99)
ax.text(aref[1], 1.0, eminZ[0]+0.01, 'bcc', color='b', zorder=99, size='large')

ax.set_xlabel('a')
ax.set_xlim(2.4, 3.2)
ax.set_ylabel('c/a')
ax.set_ylim(0.8, 1.6)
ax.set_zlabel('Total energy (eV)')
ax.set_zlim(rng[0] - delta, rng[1])
plt.tight_layout()
plt.savefig('./images/3D-EMT-pathway.png')

plt.figure()
plt.plot(cminZ, eminZ, 'k-')
plt.xlim(min(cminZ), max(cminZ))

plt.annotate('bcc', xy=(cminZ[0], eminZ[0]),
             xytext=(cminZ[0] + .02, eminZ[0] - .005),
             size=20, ha='left', arrowprops=dict(arrowstyle='->'))

plt.annotate('fcc', xy=(cminZ[-1], eminZ[-1]),
             xytext=(cminZ[-1] - .02, eminZ[-1] + .005),
             size=20, ha='right', arrowprops=dict(arrowstyle='->'))

plt.xlabel('c/a ratio')
plt.ylabel('Total energy (eV)')

plt.savefig('./images/2D-EMT-pathway.png')
#+END_SRC

** Next set of bulk calculations
#+BEGIN_SRC python
from ase.atoms import Atoms


#+END_SRC
